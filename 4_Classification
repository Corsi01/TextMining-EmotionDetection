{"cells":[{"cell_type":"code","execution_count":45,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2511,"status":"ok","timestamp":1736173309990,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"IX-DMtpkFVm3","outputId":"f243f8db-b74e-4124-8860-c2566dfd74a7"},"outputs":[{"name":"stdout","output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["import numpy as np\n","import pandas as pd\n","import json\n","from sklearn.model_selection import train_test_split\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","import matplotlib.pyplot as plt\n","\n","\n","\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":7026,"status":"ok","timestamp":1736170201931,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"JFTtAI5aFWwz"},"outputs":[],"source":["df = pd.read_csv('/content/drive/MyDrive/TEXT MINING/Data/processed_dataset.csv')\n","train_embeddings = pd.read_csv('/content/drive/MyDrive/TEXT MINING/Data/300_train_complete_embeddings.csv', index_col=0)\n","test_embeddings = pd.read_csv('/content/drive/MyDrive/TEXT MINING/Data/300_test_complete_embeddings.csv', index_col=0)\n","emotion_embeddings = pd.read_csv('/content/drive/MyDrive/TEXT MINING/Data/emotional_vectors.csv', index_col=0)\n","train_synonyms = pd.read_csv('/content/drive/MyDrive/TEXT MINING/Data/300_train_top_5_similarities.csv', index_col = 0)\n","test_synonyms = pd.read_csv('/content/drive/MyDrive/TEXT MINING/Data/300_test_top_5_similarities.csv', index_col = 0)"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"executionInfo":{"elapsed":15,"status":"ok","timestamp":1736170201936,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"Ao8vy_aYT7Rk","outputId":"231739c5-5f10-4d61-8ece-d6ad63e3dabd"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train_embeddings"},"text/html":["\n","  \u003cdiv id=\"df-8caa4d97-b06e-4fa2-9824-684da331fddc\" class=\"colab-df-container\"\u003e\n","    \u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e0\u003c/th\u003e\n","      \u003cth\u003e1\u003c/th\u003e\n","      \u003cth\u003e2\u003c/th\u003e\n","      \u003cth\u003e3\u003c/th\u003e\n","      \u003cth\u003e4\u003c/th\u003e\n","      \u003cth\u003e5\u003c/th\u003e\n","      \u003cth\u003e6\u003c/th\u003e\n","      \u003cth\u003e7\u003c/th\u003e\n","      \u003cth\u003e8\u003c/th\u003e\n","      \u003cth\u003e9\u003c/th\u003e\n","      \u003cth\u003e...\u003c/th\u003e\n","      \u003cth\u003e290\u003c/th\u003e\n","      \u003cth\u003e291\u003c/th\u003e\n","      \u003cth\u003e292\u003c/th\u003e\n","      \u003cth\u003e293\u003c/th\u003e\n","      \u003cth\u003e294\u003c/th\u003e\n","      \u003cth\u003e295\u003c/th\u003e\n","      \u003cth\u003e296\u003c/th\u003e\n","      \u003cth\u003e297\u003c/th\u003e\n","      \u003cth\u003e298\u003c/th\u003e\n","      \u003cth\u003e299\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003elouisville\u003c/th\u003e\n","      \u003ctd\u003e-0.373960\u003c/td\u003e\n","      \u003ctd\u003e0.340770\u003c/td\u003e\n","      \u003ctd\u003e-0.021993\u003c/td\u003e\n","      \u003ctd\u003e0.407610\u003c/td\u003e\n","      \u003ctd\u003e-0.470630\u003c/td\u003e\n","      \u003ctd\u003e-0.067766\u003c/td\u003e\n","      \u003ctd\u003e0.282410\u003c/td\u003e\n","      \u003ctd\u003e-0.147510\u003c/td\u003e\n","      \u003ctd\u003e0.288030\u003c/td\u003e\n","      \u003ctd\u003e1.083000\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e0.651450\u003c/td\u003e\n","      \u003ctd\u003e-0.381400\u003c/td\u003e\n","      \u003ctd\u003e0.449990\u003c/td\u003e\n","      \u003ctd\u003e0.573600\u003c/td\u003e\n","      \u003ctd\u003e0.192920\u003c/td\u003e\n","      \u003ctd\u003e-0.208090\u003c/td\u003e\n","      \u003ctd\u003e0.391490\u003c/td\u003e\n","      \u003ctd\u003e-0.293980\u003c/td\u003e\n","      \u003ctd\u003e-0.163820\u003c/td\u003e\n","      \u003ctd\u003e0.176160\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003ehonouring\u003c/th\u003e\n","      \u003ctd\u003e0.025436\u003c/td\u003e\n","      \u003ctd\u003e0.122731\u003c/td\u003e\n","      \u003ctd\u003e-0.043138\u003c/td\u003e\n","      \u003ctd\u003e0.044056\u003c/td\u003e\n","      \u003ctd\u003e-0.321270\u003c/td\u003e\n","      \u003ctd\u003e-0.149463\u003c/td\u003e\n","      \u003ctd\u003e-0.549452\u003c/td\u003e\n","      \u003ctd\u003e0.011406\u003c/td\u003e\n","      \u003ctd\u003e-0.184334\u003c/td\u003e\n","      \u003ctd\u003e0.267124\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e0.435608\u003c/td\u003e\n","      \u003ctd\u003e-0.255318\u003c/td\u003e\n","      \u003ctd\u003e0.170106\u003c/td\u003e\n","      \u003ctd\u003e-0.172523\u003c/td\u003e\n","      \u003ctd\u003e-0.170877\u003c/td\u003e\n","      \u003ctd\u003e-0.140597\u003c/td\u003e\n","      \u003ctd\u003e0.102598\u003c/td\u003e\n","      \u003ctd\u003e0.581545\u003c/td\u003e\n","      \u003ctd\u003e-0.058473\u003c/td\u003e\n","      \u003ctd\u003e-0.214355\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003ecould\u003c/th\u003e\n","      \u003ctd\u003e-0.256970\u003c/td\u003e\n","      \u003ctd\u003e0.412040\u003c/td\u003e\n","      \u003ctd\u003e-0.582720\u003c/td\u003e\n","      \u003ctd\u003e-0.049361\u003c/td\u003e\n","      \u003ctd\u003e0.019696\u003c/td\u003e\n","      \u003ctd\u003e0.089635\u003c/td\u003e\n","      \u003ctd\u003e0.399440\u003c/td\u003e\n","      \u003ctd\u003e0.151160\u003c/td\u003e\n","      \u003ctd\u003e0.180850\u003c/td\u003e\n","      \u003ctd\u003e-2.136900\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e-0.142370\u003c/td\u003e\n","      \u003ctd\u003e-0.195640\u003c/td\u003e\n","      \u003ctd\u003e0.531510\u003c/td\u003e\n","      \u003ctd\u003e0.006118\u003c/td\u003e\n","      \u003ctd\u003e0.214170\u003c/td\u003e\n","      \u003ctd\u003e-0.216500\u003c/td\u003e\n","      \u003ctd\u003e0.114230\u003c/td\u003e\n","      \u003ctd\u003e-0.709880\u003c/td\u003e\n","      \u003ctd\u003e-0.201640\u003c/td\u003e\n","      \u003ctd\u003e0.160570\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003ebaseless\u003c/th\u003e\n","      \u003ctd\u003e0.675860\u003c/td\u003e\n","      \u003ctd\u003e-0.055196\u003c/td\u003e\n","      \u003ctd\u003e0.156391\u003c/td\u003e\n","      \u003ctd\u003e0.149760\u003c/td\u003e\n","      \u003ctd\u003e-0.054690\u003c/td\u003e\n","      \u003ctd\u003e-0.628529\u003c/td\u003e\n","      \u003ctd\u003e0.216436\u003c/td\u003e\n","      \u003ctd\u003e0.001698\u003c/td\u003e\n","      \u003ctd\u003e0.423069\u003c/td\u003e\n","      \u003ctd\u003e-1.115823\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e0.050308\u003c/td\u003e\n","      \u003ctd\u003e0.010147\u003c/td\u003e\n","      \u003ctd\u003e0.450539\u003c/td\u003e\n","      \u003ctd\u003e0.669224\u003c/td\u003e\n","      \u003ctd\u003e-0.109531\u003c/td\u003e\n","      \u003ctd\u003e-0.251300\u003c/td\u003e\n","      \u003ctd\u003e0.120260\u003c/td\u003e\n","      \u003ctd\u003e0.142289\u003c/td\u003e\n","      \u003ctd\u003e-0.295863\u003c/td\u003e\n","      \u003ctd\u003e0.088690\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003eneovagina\u003c/th\u003e\n","      \u003ctd\u003e0.000000\u003c/td\u003e\n","      \u003ctd\u003e0.000000\u003c/td\u003e\n","      \u003ctd\u003e0.000000\u003c/td\u003e\n","      \u003ctd\u003e0.000000\u003c/td\u003e\n","      \u003ctd\u003e0.000000\u003c/td\u003e\n","      \u003ctd\u003e0.000000\u003c/td\u003e\n","      \u003ctd\u003e0.000000\u003c/td\u003e\n","      \u003ctd\u003e0.000000\u003c/td\u003e\n","      \u003ctd\u003e0.000000\u003c/td\u003e\n","      \u003ctd\u003e0.000000\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e0.000000\u003c/td\u003e\n","      \u003ctd\u003e0.000000\u003c/td\u003e\n","      \u003ctd\u003e0.000000\u003c/td\u003e\n","      \u003ctd\u003e0.000000\u003c/td\u003e\n","      \u003ctd\u003e0.000000\u003c/td\u003e\n","      \u003ctd\u003e0.000000\u003c/td\u003e\n","      \u003ctd\u003e0.000000\u003c/td\u003e\n","      \u003ctd\u003e0.000000\u003c/td\u003e\n","      \u003ctd\u003e0.000000\u003c/td\u003e\n","      \u003ctd\u003e0.000000\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003cp\u003e5 rows × 300 columns\u003c/p\u003e\n","\u003c/div\u003e\n","    \u003cdiv class=\"colab-df-buttons\"\u003e\n","\n","  \u003cdiv class=\"colab-df-container\"\u003e\n","    \u003cbutton class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8caa4d97-b06e-4fa2-9824-684da331fddc')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\"\u003e\n","\n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\"\u003e\n","    \u003cpath d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/\u003e\n","  \u003c/svg\u003e\n","    \u003c/button\u003e\n","\n","  \u003cstyle\u003e\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  \u003c/style\u003e\n","\n","    \u003cscript\u003e\n","      const buttonEl =\n","        document.querySelector('#df-8caa4d97-b06e-4fa2-9824-684da331fddc button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8caa4d97-b06e-4fa2-9824-684da331fddc');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '\u003ca target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb\u003edata table notebook\u003c/a\u003e'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    \u003c/script\u003e\n","  \u003c/div\u003e\n","\n","\n","\u003cdiv id=\"df-d4f6997c-1a47-41ec-acb3-46a7c47156d6\"\u003e\n","  \u003cbutton class=\"colab-df-quickchart\" onclick=\"quickchart('df-d4f6997c-1a47-41ec-acb3-46a7c47156d6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\"\u003e\n","\n","\u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\"\u003e\n","    \u003cg\u003e\n","        \u003cpath d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/\u003e\n","    \u003c/g\u003e\n","\u003c/svg\u003e\n","  \u003c/button\u003e\n","\n","\u003cstyle\u003e\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","\u003c/style\u003e\n","\n","  \u003cscript\u003e\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() =\u003e {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d4f6997c-1a47-41ec-acb3-46a7c47156d6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  \u003c/script\u003e\n","\u003c/div\u003e\n","\n","    \u003c/div\u003e\n","  \u003c/div\u003e\n"],"text/plain":["                   0         1         2         3         4         5  \\\n","louisville -0.373960  0.340770 -0.021993  0.407610 -0.470630 -0.067766   \n","honouring   0.025436  0.122731 -0.043138  0.044056 -0.321270 -0.149463   \n","could      -0.256970  0.412040 -0.582720 -0.049361  0.019696  0.089635   \n","baseless    0.675860 -0.055196  0.156391  0.149760 -0.054690 -0.628529   \n","neovagina   0.000000  0.000000  0.000000  0.000000  0.000000  0.000000   \n","\n","                   6         7         8         9  ...       290       291  \\\n","louisville  0.282410 -0.147510  0.288030  1.083000  ...  0.651450 -0.381400   \n","honouring  -0.549452  0.011406 -0.184334  0.267124  ...  0.435608 -0.255318   \n","could       0.399440  0.151160  0.180850 -2.136900  ... -0.142370 -0.195640   \n","baseless    0.216436  0.001698  0.423069 -1.115823  ...  0.050308  0.010147   \n","neovagina   0.000000  0.000000  0.000000  0.000000  ...  0.000000  0.000000   \n","\n","                 292       293       294       295       296       297  \\\n","louisville  0.449990  0.573600  0.192920 -0.208090  0.391490 -0.293980   \n","honouring   0.170106 -0.172523 -0.170877 -0.140597  0.102598  0.581545   \n","could       0.531510  0.006118  0.214170 -0.216500  0.114230 -0.709880   \n","baseless    0.450539  0.669224 -0.109531 -0.251300  0.120260  0.142289   \n","neovagina   0.000000  0.000000  0.000000  0.000000  0.000000  0.000000   \n","\n","                 298       299  \n","louisville -0.163820  0.176160  \n","honouring  -0.058473 -0.214355  \n","could      -0.201640  0.160570  \n","baseless   -0.295863  0.088690  \n","neovagina   0.000000  0.000000  \n","\n","[5 rows x 300 columns]"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["train_embeddings.head()"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":269},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1736170201936,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"cEBXXqCwT_l5","outputId":"40ef89ce-ade4-44cc-fd2f-23914d796420"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"emotion_embeddings"},"text/html":["\n","  \u003cdiv id=\"df-e2430507-cfd0-400a-80d2-47adc3cfeb9c\" class=\"colab-df-container\"\u003e\n","    \u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003eanger\u003c/th\u003e\n","      \u003cth\u003eanticipation\u003c/th\u003e\n","      \u003cth\u003edisgust\u003c/th\u003e\n","      \u003cth\u003efear\u003c/th\u003e\n","      \u003cth\u003ejoy\u003c/th\u003e\n","      \u003cth\u003enegative\u003c/th\u003e\n","      \u003cth\u003epositive\u003c/th\u003e\n","      \u003cth\u003esadness\u003c/th\u003e\n","      \u003cth\u003esurprise\u003c/th\u003e\n","      \u003cth\u003etrust\u003c/th\u003e\n","      \u003cth\u003e...\u003c/th\u003e\n","      \u003cth\u003e#melancholy\u003c/th\u003e\n","      \u003cth\u003e#pleasantness\u003c/th\u003e\n","      \u003cth\u003e#rage\u003c/th\u003e\n","      \u003cth\u003e#responsiveness\u003c/th\u003e\n","      \u003cth\u003e#sadness\u003c/th\u003e\n","      \u003cth\u003e#serenity\u003c/th\u003e\n","      \u003cth\u003e#terror\u003c/th\u003e\n","      \u003cth\u003eValence\u003c/th\u003e\n","      \u003cth\u003eArousal\u003c/th\u003e\n","      \u003cth\u003eDominance\u003c/th\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003eword\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003eaah\u003c/th\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.273372\u003c/td\u003e\n","      \u003ctd\u003e0.506065\u003c/td\u003e\n","      \u003ctd\u003e0.358236\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003eabandon\u003c/th\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.052000\u003c/td\u003e\n","      \u003ctd\u003e0.519000\u003c/td\u003e\n","      \u003ctd\u003e0.245000\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003eabandoned\u003c/th\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.046000\u003c/td\u003e\n","      \u003ctd\u003e0.481000\u003c/td\u003e\n","      \u003ctd\u003e0.130000\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003eabbreviated\u003c/th\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.339459\u003c/td\u003e\n","      \u003ctd\u003e0.515586\u003c/td\u003e\n","      \u003ctd\u003e0.426515\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003eabdomen\u003c/th\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","      \u003ctd\u003e0.469000\u003c/td\u003e\n","      \u003ctd\u003e0.462000\u003c/td\u003e\n","      \u003ctd\u003e0.471000\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003cp\u003e5 rows × 51 columns\u003c/p\u003e\n","\u003c/div\u003e\n","    \u003cdiv class=\"colab-df-buttons\"\u003e\n","\n","  \u003cdiv class=\"colab-df-container\"\u003e\n","    \u003cbutton class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e2430507-cfd0-400a-80d2-47adc3cfeb9c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\"\u003e\n","\n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\"\u003e\n","    \u003cpath d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/\u003e\n","  \u003c/svg\u003e\n","    \u003c/button\u003e\n","\n","  \u003cstyle\u003e\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  \u003c/style\u003e\n","\n","    \u003cscript\u003e\n","      const buttonEl =\n","        document.querySelector('#df-e2430507-cfd0-400a-80d2-47adc3cfeb9c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e2430507-cfd0-400a-80d2-47adc3cfeb9c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '\u003ca target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb\u003edata table notebook\u003c/a\u003e'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    \u003c/script\u003e\n","  \u003c/div\u003e\n","\n","\n","\u003cdiv id=\"df-27be8544-697d-41cf-b6d1-82544632a1fd\"\u003e\n","  \u003cbutton class=\"colab-df-quickchart\" onclick=\"quickchart('df-27be8544-697d-41cf-b6d1-82544632a1fd')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\"\u003e\n","\n","\u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\"\u003e\n","    \u003cg\u003e\n","        \u003cpath d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/\u003e\n","    \u003c/g\u003e\n","\u003c/svg\u003e\n","  \u003c/button\u003e\n","\n","\u003cstyle\u003e\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","\u003c/style\u003e\n","\n","  \u003cscript\u003e\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() =\u003e {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-27be8544-697d-41cf-b6d1-82544632a1fd button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  \u003c/script\u003e\n","\u003c/div\u003e\n","\n","    \u003c/div\u003e\n","  \u003c/div\u003e\n"],"text/plain":["             anger  anticipation  disgust  fear  joy  negative  positive  \\\n","word                                                                       \n","aah            0.0           0.0      0.0   0.0  0.0       1.0       0.0   \n","abandon        0.0           0.0      0.0   1.0  0.0       1.0       0.0   \n","abandoned      1.0           0.0      0.0   1.0  0.0       1.0       0.0   \n","abbreviated    0.0           0.0      0.0   0.0  0.0       1.0       0.0   \n","abdomen        0.0           0.0      0.0   0.0  0.0       1.0       0.0   \n","\n","             sadness  surprise  trust  ...  #melancholy  #pleasantness  #rage  \\\n","word                                   ...                                      \n","aah              1.0       0.0    0.0  ...          0.0            0.0    0.0   \n","abandon          1.0       0.0    0.0  ...          1.0            0.0    0.0   \n","abandoned        1.0       0.0    0.0  ...          1.0            0.0    0.0   \n","abbreviated      1.0       0.0    0.0  ...          1.0            0.0    0.0   \n","abdomen          1.0       0.0    0.0  ...          1.0            0.0    0.0   \n","\n","             #responsiveness  #sadness  #serenity  #terror   Valence  \\\n","word                                                                   \n","aah                      0.0       1.0        0.0      0.0  0.273372   \n","abandon                  0.0       0.0        0.0      0.0  0.052000   \n","abandoned                0.0       0.0        0.0      0.0  0.046000   \n","abbreviated              0.0       0.0        0.0      0.0  0.339459   \n","abdomen                  0.0       0.0        0.0      0.0  0.469000   \n","\n","              Arousal  Dominance  \n","word                              \n","aah          0.506065   0.358236  \n","abandon      0.519000   0.245000  \n","abandoned    0.481000   0.130000  \n","abbreviated  0.515586   0.426515  \n","abdomen      0.462000   0.471000  \n","\n","[5 rows x 51 columns]"]},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":["emotion_embeddings.head()"]},{"cell_type":"code","execution_count":6,"metadata":{"executionInfo":{"elapsed":1304,"status":"ok","timestamp":1736170203228,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"VjjhFtQkRp1A"},"outputs":[],"source":["train_dict = train_embeddings.apply(lambda row: np.array(row), axis=1).to_dict()\n","test_dict = test_embeddings.apply(lambda row: np.array(row), axis=1).to_dict()\n","\n","emotion_dict = emotion_embeddings.apply(lambda row: np.array(row), axis=1).to_dict()\n","\n","train_synonyms_dict = train_synonyms.apply(lambda row: np.array(row), axis=1).to_dict()\n","test_synonyms_dict = test_synonyms.apply(lambda row: np.array(row), axis=1).to_dict()"]},{"cell_type":"code","execution_count":7,"metadata":{"executionInfo":{"elapsed":5,"status":"ok","timestamp":1736170203229,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"H8vwaxJuQmv7"},"outputs":[],"source":["df['document_tokens'] = df['processed_text'].apply(lambda x: x.split())"]},{"cell_type":"code","execution_count":8,"metadata":{"executionInfo":{"elapsed":4,"status":"ok","timestamp":1736170203229,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"AhA1O46HFWt5"},"outputs":[],"source":["X, y = df.drop(columns=['mapped_emotion']), df['mapped_emotion']\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0, stratify=y)\n","\n","X_train_tokens, X_test_tokens, X_train_texts, X_test_texts = X_train['document_tokens'], X_test['document_tokens'], X_train['processed_text'], X_test['processed_text']"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":438,"status":"ok","timestamp":1736170203663,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"SKIFTd7aFWrn","outputId":"008557a5-6630-4c97-947c-63dd26354a08"},"outputs":[{"name":"stdout","output_type":"stream","text":["(14137, 11681) (3535, 11681)\n"]}],"source":["vectorizer = TfidfVectorizer()\n","\n","train_tfidf = vectorizer.fit_transform(X_train_texts)\n","test_tfidf = vectorizer.transform(X_test_texts)\n","\n","print(train_tfidf.shape, test_tfidf.shape)\n","\n","feature_names = list(vectorizer.get_feature_names_out())\n"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":302},"executionInfo":{"elapsed":16,"status":"ok","timestamp":1736170203663,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"1qm3MoNawPqN","outputId":"48b036f9-af98-439a-8071-827c5a647513"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"df2\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": 0,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4127.28196269366,\n        \"min\": 0.9632716806947235,\n        \"max\": 11681.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          11681.0,\n          9.272139190393155,\n          9.863474306170954\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe"},"text/html":["\n","  \u003cdiv id=\"df-de777c4f-ba78-45bd-86fe-5bac4cd6c9f1\" class=\"colab-df-container\"\u003e\n","    \u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e0\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003ecount\u003c/th\u003e\n","      \u003ctd\u003e11681.000000\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003emean\u003c/th\u003e\n","      \u003ctd\u003e9.272139\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003estd\u003c/th\u003e\n","      \u003ctd\u003e0.963272\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003emin\u003c/th\u003e\n","      \u003ctd\u003e2.244732\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e25%\u003c/th\u003e\n","      \u003ctd\u003e8.947184\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e50%\u003c/th\u003e\n","      \u003ctd\u003e9.863474\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e75%\u003c/th\u003e\n","      \u003ctd\u003e9.863474\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003emax\u003c/th\u003e\n","      \u003ctd\u003e9.863474\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003c/div\u003e\n","    \u003cdiv class=\"colab-df-buttons\"\u003e\n","\n","  \u003cdiv class=\"colab-df-container\"\u003e\n","    \u003cbutton class=\"colab-df-convert\" onclick=\"convertToInteractive('df-de777c4f-ba78-45bd-86fe-5bac4cd6c9f1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\"\u003e\n","\n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\"\u003e\n","    \u003cpath d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/\u003e\n","  \u003c/svg\u003e\n","    \u003c/button\u003e\n","\n","  \u003cstyle\u003e\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  \u003c/style\u003e\n","\n","    \u003cscript\u003e\n","      const buttonEl =\n","        document.querySelector('#df-de777c4f-ba78-45bd-86fe-5bac4cd6c9f1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-de777c4f-ba78-45bd-86fe-5bac4cd6c9f1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '\u003ca target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb\u003edata table notebook\u003c/a\u003e'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    \u003c/script\u003e\n","  \u003c/div\u003e\n","\n","\n","\u003cdiv id=\"df-c6362429-a1a4-49f2-b9ad-b5a356931ceb\"\u003e\n","  \u003cbutton class=\"colab-df-quickchart\" onclick=\"quickchart('df-c6362429-a1a4-49f2-b9ad-b5a356931ceb')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\"\u003e\n","\n","\u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\"\u003e\n","    \u003cg\u003e\n","        \u003cpath d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/\u003e\n","    \u003c/g\u003e\n","\u003c/svg\u003e\n","  \u003c/button\u003e\n","\n","\u003cstyle\u003e\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","\u003c/style\u003e\n","\n","  \u003cscript\u003e\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() =\u003e {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c6362429-a1a4-49f2-b9ad-b5a356931ceb button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  \u003c/script\u003e\n","\u003c/div\u003e\n","\n","    \u003c/div\u003e\n","  \u003c/div\u003e\n"],"text/plain":["                  0\n","count  11681.000000\n","mean       9.272139\n","std        0.963272\n","min        2.244732\n","25%        8.947184\n","50%        9.863474\n","75%        9.863474\n","max        9.863474"]},"execution_count":10,"metadata":{},"output_type":"execute_result"}],"source":["idf_values = vectorizer.idf_\n","df2 = pd.DataFrame(idf_values)\n","df2.describe()"]},{"cell_type":"code","execution_count":11,"metadata":{"executionInfo":{"elapsed":14,"status":"ok","timestamp":1736170203663,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"f2f1W8FJtWO8"},"outputs":[],"source":["def create_data_matrix(dict1, dict2, dict3, token_lists, tfidf_matrix, feature_names, method):\n","\n","    # Determine embedding dimension\n","    embedding_dim = next(iter(dict1.values())).shape[0]\n","    zero_vector = np.zeros(next(iter(dict2.values())).shape[0])\n","\n","    # Inizialize list of vectors to represent document\n","    document_vectors = []\n","\n","    # Iterate on doc\n","    for doc_idx, tokens in enumerate(token_lists):\n","        print(doc_idx)\n","        # Get tfidf for the current document tokens\n","        token_tfidf = {token: tfidf_matrix[doc_idx, feature_names.index(token)]\n","                       for token in tokens if token in feature_names}\n","        print('done1')\n","        # Weighted average of Glove embeddings using tfidf as weights\n","        weighted_vectors = []\n","        weights = []\n","\n","        # Default value of IDF for missing tokens - median of IDF train distribution\n","        idf_default = 9.86\n","\n","        for token in tokens:\n","            if token in feature_names:\n","        # Token present in the vectorizer vocabulary, use his TFIDF\n","                tfidf_value = tfidf_matrix[doc_idx, feature_names.index(token)]\n","            else:\n","        # TToken missing, use default IDF to compute TFIDF\n","                tfidf_value = idf_default * (tokens.count(token) / len(tokens))\n","\n","            if token in dict1:\n","        # Calculates weighted embedding if token is in dict1\n","                weighted_vectors.append(dict1[token] * tfidf_value)\n","                weights.append(tfidf_value)\n","        print('done2')\n","        if weighted_vectors:\n","            tfidf_mean_vector = np.sum(weighted_vectors, axis=0) / np.sum(weights)\n","        else:\n","            tfidf_mean_vector = np.zeros(embedding_dim)  # REDUNDANT?\n","        print('done3')\n","        # Max pooling of emotional features vectors\n","        pooling_vectors = []\n","        for token in tokens:\n","            # Check if token is associated with a feature vector and retrieve it\n","            if token in dict2:\n","\n","                token_vector = dict2[token]\n","                # Retrieve features of 5 associated emotional words\n","                associated_vectors = [\n","                    dict2[assoc_token] if assoc_token in dict2 else zero_vector\n","                    for assoc_token in dict3.get(token, [])\n","                ]\n","\n","                # Concatenate original vector with the 5 associated\n","                expanded_vector = np.concatenate([token_vector] + associated_vectors)\n","                pooling_vectors.append(expanded_vector)\n","            else:\n","                # If token is not associated with vector fill with 0\n","                expanded_vector = np.concatenate([zero_vector] * 6)\n","                pooling_vectors.append(expanded_vector)\n","        print('done4')\n","        if pooling_vectors:\n","            if method == 'max':\n","              max_pooled_vector = np.max(pooling_vectors, axis=0)\n","            elif method == 'sum':\n","              pooled_vector = np.sum(pooling_vectors, axis=0)\n","            else:\n","              pooled_vector = np.mean(pooling_vectors, axis=0)\n","\n","\n","        else:\n","            max_pooled_vector = np.concatenate([zero_vector] * 6)\n","        print('done5')\n","        # Concatenate resulting vectors\n","        concatenated_vector = np.concatenate([tfidf_mean_vector, max_pooled_vector])\n","        document_vectors.append(concatenated_vector)\n","        print('done6')\n","    # Convert list of vectors in an np array\n","    data_matrix = np.vstack(document_vectors)\n","    return data_matrix"]},{"cell_type":"code","execution_count":12,"metadata":{"executionInfo":{"elapsed":14,"status":"ok","timestamp":1736170203663,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"N2RMUbavmgPD"},"outputs":[],"source":["def create_data_matrix(dict1, dict2, dict3, token_lists, tfidf_matrix, feature_names, method, debug=False):\n","\n","    # Determine embedding dimension\n","    embedding_dim = next(iter(dict1.values())).shape[0]\n","    zero_vector = np.zeros(next(iter(dict2.values())).shape[0])\n","    max_associates = 5  # Max number of associated vectors\n","\n","    # Initialize list of vectors to represent documents\n","    document_vectors = []\n","\n","    # Iterate over documents\n","    for doc_idx, tokens in enumerate(token_lists):\n","        if debug:\n","            print(f\"Processing document {doc_idx}\")\n","\n","        # Get tfidf for the current document tokens\n","        token_tfidf = {token: tfidf_matrix[doc_idx, feature_names.index(token)]\n","                       for token in tokens if token in feature_names}\n","\n","        # Weighted average of Glove embeddings using TF-IDF as weights\n","        weighted_vectors = []\n","        weights = []\n","\n","        # Default value of IDF for missing tokens - median of IDF train distribution\n","        idf_default = 9.86\n","\n","        for token in tokens:\n","            if token in feature_names:\n","                # Token present in the vectorizer vocabulary, use its TF-IDF\n","                tfidf_value = tfidf_matrix[doc_idx, feature_names.index(token)]\n","            else:\n","                # Token missing, use default IDF to compute TF-IDF\n","                tfidf_value = idf_default * (tokens.count(token) / len(tokens))\n","\n","            if token in dict1:\n","                # Calculate weighted embedding if token is in dict1\n","                weighted_vectors.append(dict1[token] * tfidf_value)\n","                weights.append(tfidf_value)\n","\n","        # Compute TF-IDF mean vector\n","        if weighted_vectors:\n","            tfidf_mean_vector = np.sum(weighted_vectors, axis=0) / np.sum(weights)\n","        else:\n","            tfidf_mean_vector = np.zeros(embedding_dim)  # Fallback vector\n","\n","        if debug:\n","            print(f\"TF-IDF mean vector shape: {tfidf_mean_vector.shape}\")\n","\n","        # Max pooling of emotional features vectors\n","        pooling_vectors = []\n","        for token in tokens:\n","            if token in dict2:\n","                token_vector = dict2[token]\n","                # Retrieve features of 5 associated emotional words\n","                associated_vectors = [\n","                    dict2[assoc_token] if assoc_token in dict2 else zero_vector\n","                    for assoc_token in dict3.get(token, [])\n","                ]\n","\n","                # Ensure exactly 5 associated vectors by padding with zeros\n","                while len(associated_vectors) \u003c max_associates:\n","                    associated_vectors.append(zero_vector)\n","\n","                # Concatenate token_vector with exactly 5 associated vectors\n","                expanded_vector = np.concatenate([token_vector] + associated_vectors)\n","            else:\n","                # Token missing, fallback to zeros\n","                expanded_vector = np.concatenate([zero_vector] * (1 + max_associates))\n","\n","            pooling_vectors.append(expanded_vector)\n","\n","        if debug:\n","            for idx, vec in enumerate(pooling_vectors):\n","                print(f\"Pooling vector {idx} shape: {vec.shape}\")\n","\n","        # Compute max pooling (or other methods)\n","        if pooling_vectors:\n","            if method == 'max':\n","                max_pooled_vector = np.max(pooling_vectors, axis=0)\n","            elif method == 'sum':\n","                max_pooled_vector = np.sum(pooling_vectors, axis=0)\n","            else:  # Default to mean pooling\n","                max_pooled_vector = np.mean(pooling_vectors, axis=0)\n","        else:\n","            max_pooled_vector = np.concatenate([zero_vector] * (1 + max_associates))\n","\n","        if debug:\n","            print(f\"Max pooled vector shape: {max_pooled_vector.shape}\")\n","\n","        # Concatenate resulting vectors\n","        concatenated_vector = np.concatenate([tfidf_mean_vector, max_pooled_vector])\n","        document_vectors.append(concatenated_vector)\n","\n","        if debug:\n","            print(f\"Document {doc_idx} processed, concatenated vector shape: {concatenated_vector.shape}\")\n","\n","    # Convert list of vectors into an np array\n","    try:\n","        data_matrix = np.vstack(document_vectors)\n","        if debug:\n","            print(f\"Final data matrix shape: {data_matrix.shape}\")\n","        return data_matrix\n","    except ValueError as e:\n","        print(f\"Error during np.vstack: {e}\")\n","        for idx, vec in enumerate(document_vectors):\n","            print(f\"Document {idx} - Vector shape: {vec.shape}\")\n","        raise\n"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"executionInfo":{"elapsed":83205,"status":"ok","timestamp":1736170286855,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"PEhlwZqeFWio","outputId":"8b5be12d-3b2c-4c17-9411-3314752a4c02"},"outputs":[{"data":{"text/plain":["(14137, 606)"]},"execution_count":13,"metadata":{},"output_type":"execute_result"}],"source":["train_matrix = create_data_matrix(train_dict, emotion_dict, train_synonyms_dict, X_train_tokens, train_tfidf, feature_names, 'max')\n","train_matrix.shape"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":19618,"status":"ok","timestamp":1736170306471,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"dJXEsXVYV5qs","outputId":"6322aa45-4251-436f-ec55-bfc9ca293140"},"outputs":[{"data":{"text/plain":["(3535, 606)"]},"execution_count":14,"metadata":{},"output_type":"execute_result"}],"source":["test_matrix = create_data_matrix(test_dict, emotion_dict, test_synonyms_dict, X_test_tokens, test_tfidf, feature_names, 'max')\n","test_matrix.shape"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":283823,"status":"ok","timestamp":1736170590291,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"J0hskMkrnmCu","outputId":"fe7cad33-6807-45d6-c701-7b64bf6d3479"},"outputs":[{"name":"stdout","output_type":"stream","text":["Classification Report for SVM:\n","\n","              precision    recall  f1-score   support\n","\n","       anger       0.52      0.51      0.51       392\n","     disgust       0.24      0.27      0.26        45\n","        fear       0.36      0.46      0.41        61\n","         joy       0.85      0.88      0.86      2409\n","     sadness       0.55      0.52      0.53       254\n","    surprise       0.42      0.31      0.36       374\n","\n","    accuracy                           0.74      3535\n","   macro avg       0.49      0.49      0.49      3535\n","weighted avg       0.73      0.74      0.73      3535\n","\n","============================================================\n","Classification Report for Random Forest:\n","\n","              precision    recall  f1-score   support\n","\n","       anger       0.58      0.33      0.42       392\n","     disgust       0.00      0.00      0.00        45\n","        fear       1.00      0.11      0.21        61\n","         joy       0.76      0.98      0.85      2409\n","     sadness       0.70      0.26      0.38       254\n","    surprise       0.61      0.13      0.21       374\n","\n","    accuracy                           0.74      3535\n","   macro avg       0.61      0.30      0.35      3535\n","weighted avg       0.71      0.74      0.68      3535\n","\n","============================================================\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n","/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [13:34:50] WARNING: /workspace/src/learner.cc:740: \n","Parameters: { \"use_label_encoder\" } are not used.\n","\n","  warnings.warn(smsg, UserWarning)\n"]},{"name":"stdout","output_type":"stream","text":["Classification Report for XGBoost:\n","\n","              precision    recall  f1-score   support\n","\n","           0       0.64      0.47      0.54       392\n","           1       0.86      0.13      0.23        45\n","           2       0.71      0.52      0.60        61\n","           3       0.82      0.95      0.88      2409\n","           4       0.71      0.53      0.61       254\n","           5       0.55      0.34      0.42       374\n","\n","    accuracy                           0.79      3535\n","   macro avg       0.72      0.49      0.55      3535\n","weighted avg       0.77      0.79      0.76      3535\n","\n","============================================================\n"]}],"source":["from sklearn.svm import SVC\n","from sklearn.naive_bayes import MultinomialNB\n","from sklearn.ensemble import RandomForestClassifier\n","from xgboost import XGBClassifier\n","from sklearn.metrics import classification_report\n","\n","# Funzione per addestrare e valutare un modello\n","def train_and_evaluate(model, train_matrix, y_train, test_matrix, y_test, model_name):\n","    # Addestra il modello\n","    model.fit(train_matrix, y_train)\n","\n","    # Prevedi sui dati di test\n","    y_pred = model.predict(test_matrix)\n","\n","    # Stampa il classification report\n","    print(f\"Classification Report for {model_name}:\\n\")\n","    print(classification_report(y_test, y_pred))\n","    print(\"=\" * 60)\n","\n","# Inizializza i modelli\n","svm_model = SVC(kernel='linear', random_state=42)  # SVM con kernel lineare\n","rf_model = RandomForestClassifier(n_estimators=100, random_state=42)  # Random Forest con 100 alberi\n","\n","from sklearn.preprocessing import LabelEncoder\n","\n","# Codifica le etichette\n","label_encoder = LabelEncoder()\n","y_train_encoded = label_encoder.fit_transform(y_train)\n","y_test_encoded = label_encoder.transform(y_test)\n","xgb_model = XGBClassifier(use_label_encoder=False, eval_metric='mlogloss', random_state=42)  # XGBoost\n","\n","# Addestra e valuta ciascun modello\n","train_and_evaluate(svm_model, train_matrix, y_train, test_matrix, y_test, \"SVM\")\n","train_and_evaluate(rf_model, train_matrix, y_train, test_matrix, y_test, \"Random Forest\")\n","train_and_evaluate(xgb_model, train_matrix, y_train_encoded, test_matrix, y_test_encoded, \"XGBoost\")\n","\n"]},{"cell_type":"markdown","metadata":{"id":"TssoGTuapP0E"},"source":[]},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":79458,"status":"ok","timestamp":1736170669744,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"Ga5U3DjGpRjh","outputId":"4118d652-81ba-45d3-da13-1c2fd146ff92"},"outputs":[{"data":{"text/plain":["(14137, 606)"]},"execution_count":16,"metadata":{},"output_type":"execute_result"}],"source":["train_matrix = create_data_matrix(train_dict, emotion_dict, train_synonyms_dict, X_train_tokens, train_tfidf, feature_names, 'sum')\n","train_matrix.shape"]},{"cell_type":"code","execution_count":17,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":26142,"status":"ok","timestamp":1736170695884,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"CAogsuNTpRPo","outputId":"04635dbb-c90c-4662-8a07-502287960cf9"},"outputs":[{"data":{"text/plain":["(3535, 606)"]},"execution_count":17,"metadata":{},"output_type":"execute_result"}],"source":["test_matrix = create_data_matrix(test_dict, emotion_dict, test_synonyms_dict, X_test_tokens, test_tfidf, feature_names, 'sum')\n","test_matrix.shape"]},{"cell_type":"code","execution_count":18,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":460951,"status":"ok","timestamp":1736171156833,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"WHNkBuTepgV4","outputId":"2b2f01c7-70e2-4a93-e783-1bfc140837bc"},"outputs":[{"name":"stdout","output_type":"stream","text":["Classification Report for SVM:\n","\n","              precision    recall  f1-score   support\n","\n","       anger       0.48      0.51      0.50       392\n","     disgust       0.19      0.22      0.20        45\n","        fear       0.32      0.33      0.32        61\n","         joy       0.85      0.85      0.85      2409\n","     sadness       0.49      0.45      0.47       254\n","    surprise       0.39      0.37      0.38       374\n","\n","    accuracy                           0.72      3535\n","   macro avg       0.45      0.46      0.45      3535\n","weighted avg       0.72      0.72      0.72      3535\n","\n","============================================================\n","Classification Report for Random Forest:\n","\n","              precision    recall  f1-score   support\n","\n","       anger       0.53      0.32      0.40       392\n","     disgust       0.50      0.02      0.04        45\n","        fear       1.00      0.08      0.15        61\n","         joy       0.74      0.98      0.84      2409\n","     sadness       0.68      0.20      0.31       254\n","    surprise       0.55      0.03      0.06       374\n","\n","    accuracy                           0.72      3535\n","   macro avg       0.67      0.27      0.30      3535\n","weighted avg       0.69      0.72      0.65      3535\n","\n","============================================================\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [13:44:08] WARNING: /workspace/src/learner.cc:740: \n","Parameters: { \"use_label_encoder\" } are not used.\n","\n","  warnings.warn(smsg, UserWarning)\n"]},{"name":"stdout","output_type":"stream","text":["Classification Report for XGBoost:\n","\n","              precision    recall  f1-score   support\n","\n","           0       0.60      0.48      0.53       392\n","           1       0.89      0.18      0.30        45\n","           2       0.65      0.36      0.46        61\n","           3       0.81      0.95      0.87      2409\n","           4       0.70      0.43      0.54       254\n","           5       0.56      0.24      0.34       374\n","\n","    accuracy                           0.77      3535\n","   macro avg       0.70      0.44      0.51      3535\n","weighted avg       0.75      0.77      0.74      3535\n","\n","============================================================\n"]}],"source":["# Inizializza i modelli\n","svm_model = SVC(kernel='linear', random_state=42)  # SVM con kernel lineare\n","rf_model = RandomForestClassifier(n_estimators=100, random_state=42)  # Random Forest con 100 alberi\n","xgb_model = XGBClassifier(use_label_encoder=True, eval_metric='mlogloss', random_state=42)  # XGBoost\n","\n","# Addestra e valuta ciascun modello\n","train_and_evaluate(svm_model, train_matrix, y_train, test_matrix, y_test, \"SVM\")\n","train_and_evaluate(rf_model, train_matrix, y_train, test_matrix, y_test, \"Random Forest\")\n","train_and_evaluate(xgb_model, train_matrix, y_train_encoded, test_matrix, y_test_encoded, \"XGBoost\")"]},{"cell_type":"code","execution_count":19,"metadata":{"executionInfo":{"elapsed":100340,"status":"ok","timestamp":1736171272334,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"I77L-yQtzJrl"},"outputs":[],"source":["train_matrix = create_data_matrix(train_dict, emotion_dict, train_synonyms_dict, X_train_tokens, train_tfidf, feature_names, 'mean')\n","test_matrix = create_data_matrix(test_dict, emotion_dict, test_synonyms_dict, X_test_tokens, test_tfidf, feature_names, 'mean')"]},{"cell_type":"code","execution_count":20,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":263473,"status":"ok","timestamp":1736171535800,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"Ds7CfRrrzT8R","outputId":"aa77ae2c-3285-4359-b71f-213496c10a56"},"outputs":[{"name":"stdout","output_type":"stream","text":["Classification Report for SVM:\n","\n","              precision    recall  f1-score   support\n","\n","       anger       0.53      0.48      0.51       392\n","     disgust       0.42      0.33      0.37        45\n","        fear       0.44      0.36      0.40        61\n","         joy       0.83      0.91      0.87      2409\n","     sadness       0.60      0.45      0.51       254\n","    surprise       0.45      0.30      0.36       374\n","\n","    accuracy                           0.75      3535\n","   macro avg       0.54      0.47      0.50      3535\n","weighted avg       0.73      0.75      0.73      3535\n","\n","============================================================\n","Classification Report for Random Forest:\n","\n","              precision    recall  f1-score   support\n","\n","       anger       0.53      0.35      0.42       392\n","     disgust       0.00      0.00      0.00        45\n","        fear       0.60      0.05      0.09        61\n","         joy       0.75      0.98      0.85      2409\n","     sadness       0.65      0.20      0.30       254\n","    surprise       0.50      0.06      0.10       374\n","\n","    accuracy                           0.73      3535\n","   macro avg       0.50      0.27      0.29      3535\n","weighted avg       0.68      0.73      0.66      3535\n","\n","============================================================\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n","/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [13:50:08] WARNING: /workspace/src/learner.cc:740: \n","Parameters: { \"use_label_encoder\" } are not used.\n","\n","  warnings.warn(smsg, UserWarning)\n"]},{"name":"stdout","output_type":"stream","text":["Classification Report for XGBoost:\n","\n","              precision    recall  f1-score   support\n","\n","           0       0.57      0.46      0.51       392\n","           1       0.54      0.16      0.24        45\n","           2       0.58      0.34      0.43        61\n","           3       0.80      0.95      0.87      2409\n","           4       0.68      0.36      0.47       254\n","           5       0.51      0.24      0.33       374\n","\n","    accuracy                           0.76      3535\n","   macro avg       0.62      0.42      0.48      3535\n","weighted avg       0.73      0.76      0.73      3535\n","\n","============================================================\n"]}],"source":["# Inizializza i modelli\n","svm_model = SVC(kernel='linear', random_state=42)  # SVM con kernel lineare\n","rf_model = RandomForestClassifier(n_estimators=100, random_state=42)  # Random Forest con 100 alberi\n","xgb_model = XGBClassifier(use_label_encoder=True, eval_metric='mlogloss', random_state=42)  # XGBoost\n","\n","# Addestra e valuta ciascun modello\n","train_and_evaluate(svm_model, train_matrix, y_train, test_matrix, y_test, \"SVM\")\n","train_and_evaluate(rf_model, train_matrix, y_train, test_matrix, y_test, \"Random Forest\")\n","train_and_evaluate(xgb_model, train_matrix, y_train_encoded, test_matrix, y_test_encoded, \"XGBoost\")"]},{"cell_type":"markdown","metadata":{"id":"BKddf4w3ulls"},"source":["# DL"]},{"cell_type":"code","execution_count":21,"metadata":{"executionInfo":{"elapsed":383,"status":"ok","timestamp":1736171594764,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"kpXZ2d80utUj"},"outputs":[],"source":["def assemble_document_matrix(tokens, dict1, dict2, dict3, max_tokens, feature_dim):\n","    \"\"\"\n","    Crea una rappresentazione matriciale per un documento, con padding.\n","\n","    Args:\n","        tokens (list of str): Lista di token nel documento.\n","        dict1 (dict): Dizionario 1, mappa ogni token al suo embedding vettoriale.\n","        dict2 (dict): Dizionario 2, mappa un sottoinsieme di token al loro vettore di feature.\n","        dict3 (dict): Dizionario 3, mappa un sottoinsieme di token alle 5 parole più simili.\n","        n (int): Dimensione dei vettori di feature nel dizionario 2.\n","        max_tokens (int): Numero massimo di token per documento (padding se più corto, truncamento se più lungo).\n","        feature_dim (int): Dimensione totale del vettore concatenato per ogni token.\n","\n","    Returns:\n","        np.ndarray: Una matrice di dimensione (max_tokens, feature_dim).\n","    \"\"\"\n","    document_matrix = []\n","    n = next(iter(dict2.values())).shape[0]\n","\n","    for token in tokens[:max_tokens]:  # Truncamento se il documento è più lungo di max_tokens\n","        # Assembla il vettore per il token\n","        embedding = dict1.get(token, np.zeros_like(next(iter(dict1.values()))))  # Embedding dal dizionario 1\n","        features = dict2.get(token, np.zeros(n))  # Features dal dizionario 2\n","        similar_tokens = dict3.get(token, [])  # 5 parole simili\n","        similar_features = [\n","            dict2.get(similar_token, np.zeros(n)) for similar_token in similar_tokens[:5]\n","        ]  # Features delle parole simili\n","        while len(similar_features) \u003c 5:  # Padding per arrivare a 5 parole simili\n","            similar_features.append(np.zeros(n))\n","        token_vector = np.concatenate([embedding, features] + similar_features)  # Concatenazione totale\n","        document_matrix.append(token_vector)\n","\n","    # Padding per documenti più corti di max_tokens\n","    while len(document_matrix) \u003c max_tokens:\n","        document_matrix.append(np.zeros(feature_dim))  # Vettore di zeri per padding\n","\n","    return np.array(document_matrix)"]},{"cell_type":"code","execution_count":22,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":431},"executionInfo":{"elapsed":312,"status":"ok","timestamp":1736171600669,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"mhc47LM9utFG","outputId":"0478cb75-e377-40a0-9749-5cd2464baef4"},"outputs":[{"data":{"text/html":["\u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003elen\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003ecount\u003c/th\u003e\n","      \u003ctd\u003e17672.000000\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003emean\u003c/th\u003e\n","      \u003ctd\u003e9.221084\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003estd\u003c/th\u003e\n","      \u003ctd\u003e5.294000\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003emin\u003c/th\u003e\n","      \u003ctd\u003e1.000000\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e25%\u003c/th\u003e\n","      \u003ctd\u003e5.000000\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e50%\u003c/th\u003e\n","      \u003ctd\u003e9.000000\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e75%\u003c/th\u003e\n","      \u003ctd\u003e13.000000\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003emax\u003c/th\u003e\n","      \u003ctd\u003e285.000000\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e90%\u003c/th\u003e\n","      \u003ctd\u003e16.000000\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e95%\u003c/th\u003e\n","      \u003ctd\u003e18.000000\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e99%\u003c/th\u003e\n","      \u003ctd\u003e20.000000\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003c/div\u003e\u003cbr\u003e\u003clabel\u003e\u003cb\u003edtype:\u003c/b\u003e float64\u003c/label\u003e"],"text/plain":["count    17672.000000\n","mean         9.221084\n","std          5.294000\n","min          1.000000\n","25%          5.000000\n","50%          9.000000\n","75%         13.000000\n","max        285.000000\n","90%         16.000000\n","95%         18.000000\n","99%         20.000000\n","Name: len, dtype: float64"]},"execution_count":22,"metadata":{},"output_type":"execute_result"}],"source":["df['len'] = df['document_tokens'].apply(lambda x: len(x))\n","\n","percentiles = [90, 95, 99]\n","percentile_values = np.percentile(df['len'], percentiles)\n","\n","summary = df['len'].describe()\n","summary.loc['90%'] = percentile_values[0]\n","summary.loc['95%'] = percentile_values[1]\n","summary.loc['99%'] = percentile_values[2]\n","\n","summary"]},{"cell_type":"code","execution_count":27,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7223,"status":"ok","timestamp":1736172043686,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"7leZgsyd6gs3","outputId":"63429a2e-2d36-47de-f804-11381c6facca"},"outputs":[{"data":{"text/plain":["(14137, 16, 606)"]},"execution_count":27,"metadata":{},"output_type":"execute_result"}],"source":["training_matrices = []\n","for tokens in X_train_tokens:\n","    document_matrix = assemble_document_matrix(tokens, train_dict, emotion_dict, train_synonyms_dict, 16, 606)\n","    training_matrices.append(document_matrix)\n","\n","training_matrices = np.array(training_matrices)\n","training_matrices.shape"]},{"cell_type":"code","execution_count":28,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2641,"status":"ok","timestamp":1736172125716,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"4_1QSSDu69uu","outputId":"956f872f-12bf-45cb-efe8-25167f2a08de"},"outputs":[{"data":{"text/plain":["(3535, 16, 606)"]},"execution_count":28,"metadata":{},"output_type":"execute_result"}],"source":["test_matrices = []\n","for tokens in X_test_tokens:\n","    document_matrix = assemble_document_matrix(tokens, test_dict, emotion_dict, test_synonyms_dict, 16, 606)\n","    test_matrices.append(document_matrix)\n","\n","test_matrices = np.array(test_matrices)\n","test_matrices.shape"]},{"cell_type":"code","execution_count":29,"metadata":{"executionInfo":{"elapsed":5569,"status":"ok","timestamp":1736172215664,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"lcCek5D8zl5o"},"outputs":[],"source":["from sklearn.preprocessing import LabelEncoder\n","from tensorflow.keras.utils import to_categorical\n","from sklearn.utils.class_weight import compute_class_weight\n","\n","import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras import backend as K\n","from tensorflow.keras.callbacks import EarlyStopping"]},{"cell_type":"code","execution_count":31,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":460},"executionInfo":{"elapsed":365,"status":"ok","timestamp":1736172250440,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"KbmtW5Xr7f2u","outputId":"0710bb8d-c3fc-48c1-b89a-7da32ce0853c"},"outputs":[{"data":{"text/html":["\u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003emapped_emotion\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e12019\u003c/th\u003e\n","      \u003ctd\u003ejoy\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e13058\u003c/th\u003e\n","      \u003ctd\u003ejoy\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2130\u003c/th\u003e\n","      \u003ctd\u003esurprise\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e3290\u003c/th\u003e\n","      \u003ctd\u003ejoy\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e9111\u003c/th\u003e\n","      \u003ctd\u003ejoy\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e...\u003c/th\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e9037\u003c/th\u003e\n","      \u003ctd\u003ejoy\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e13107\u003c/th\u003e\n","      \u003ctd\u003ejoy\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e10568\u003c/th\u003e\n","      \u003ctd\u003ejoy\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e17661\u003c/th\u003e\n","      \u003ctd\u003ejoy\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2307\u003c/th\u003e\n","      \u003ctd\u003esurprise\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003cp\u003e14137 rows × 1 columns\u003c/p\u003e\n","\u003c/div\u003e\u003cbr\u003e\u003clabel\u003e\u003cb\u003edtype:\u003c/b\u003e object\u003c/label\u003e"],"text/plain":["12019         joy\n","13058         joy\n","2130     surprise\n","3290          joy\n","9111          joy\n","           ...   \n","9037          joy\n","13107         joy\n","10568         joy\n","17661         joy\n","2307     surprise\n","Name: mapped_emotion, Length: 14137, dtype: object"]},"execution_count":31,"metadata":{},"output_type":"execute_result"}],"source":["y_train"]},{"cell_type":"code","execution_count":32,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":264,"status":"ok","timestamp":1736172354873,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"4ndaTQX5usyN","outputId":"80cb2580-48bd-4010-ab35-6adac23e43d2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Pesi di classe: {0: 1.5026573129251701, 1: 13.16294227188082, 2: 9.736225895316805, 3: 0.2445170886951709, 4: 2.3167813831530646, 5: 1.57603121516165}\n"]}],"source":["# Converte y_train in array NumPy\n","y_train_array = y_train.values  # Converte la Series in array NumPy\n","\n","# Calcola i pesi di classe\n","class_weights = compute_class_weight(\n","    class_weight='balanced',\n","    classes=np.unique(y_train_array),  # Le classi presenti\n","    y=y_train_array  # I valori di y_train\n",")\n","\n","# Converte i pesi di classe in dizionario\n","class_weights_dict = dict(enumerate(class_weights))  # Conversione in dizionario per Keras\n","\n","print(\"Pesi di classe:\", class_weights_dict)\n"]},{"cell_type":"code","execution_count":42,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":275,"status":"ok","timestamp":1736172979792,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"CqJRswTT9yU7","outputId":"699ee4a0-ea07-432c-d6b4-052b7ff032f8"},"outputs":[{"name":"stdout","output_type":"stream","text":["Forma di y_train_one_hot: (14137, 6)\n","Forma di y_test_one_hot: (3535, 6)\n","Mappatura delle classi: {0: 'anger', 1: 'disgust', 2: 'fear', 3: 'joy', 4: 'sadness', 5: 'surprise'}\n"]}],"source":["from sklearn.preprocessing import LabelEncoder\n","from tensorflow.keras.utils import to_categorical\n","\n","# Step 1: Codifica le etichette testuali in numeri interi\n","encoder = LabelEncoder()\n","y_train_encoded_labels = encoder.fit_transform(y_train)  # Converte testo in numeri interi\n","y_test_encoded_labels = encoder.transform(y_test)  # Usa lo stesso encoder per il test set\n","\n","# Step 2: Converte le etichette numeriche in formato one-hot\n","num_classes = len(encoder.classes_)  # Numero di classi\n","y_train_one_hot = to_categorical(y_train_encoded_labels, num_classes=num_classes)\n","y_test_one_hot = to_categorical(y_test_encoded_labels, num_classes=num_classes)\n","\n","# Verifica delle forme\n","print(\"Forma di y_train_one_hot:\", y_train_one_hot.shape)\n","print(\"Forma di y_test_one_hot:\", y_test_one_hot.shape)\n","\n","# Mappatura inversa per riferimento\n","class_mapping = dict(zip(range(len(encoder.classes_)), encoder.classes_))\n","print(\"Mappatura delle classi:\", class_mapping)\n"]},{"cell_type":"code","execution_count":102,"metadata":{"executionInfo":{"elapsed":550,"status":"ok","timestamp":1736177997178,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"LpdyhEUqur3f"},"outputs":[],"source":["import tensorflow as tf\n","\n","def weighted_categorical_crossentropy(class_weights):\n","    \"\"\"\n","    Loss function personalizzata: categorical crossentropy pesata.\n","    Args:\n","        class_weights: dizionario con i pesi per ciascuna classe.\n","    Returns:\n","        Loss: funzione di perdita pesata.\n","    \"\"\"\n","    # Converti i pesi delle classi in un tensor (assicurati che class_weights sia un dizionario)\n","    class_weights_tensor = tf.constant(list(class_weights.values()), dtype=tf.float32)\n","\n","    def loss(y_true, y_pred):\n","        # Assicura che y_true sia float32\n","        y_true = tf.cast(y_true, tf.float32)\n","\n","        # Calcola la cross-entropy standard\n","        ce_loss = tf.keras.losses.categorical_crossentropy(y_true, y_pred)\n","\n","        # Applica i pesi per classe\n","        weights = tf.reduce_sum(class_weights_tensor * y_true, axis=-1)\n","        weighted_loss = ce_loss * weights\n","\n","        # Restituisci la media della perdita pesata\n","        return tf.reduce_mean(weighted_loss)\n","\n","    return loss\n","\n","# Usa il dizionario `class_weights_dict` corretto\n","loss_function = weighted_categorical_crossentropy(class_weights_dict)"]},{"cell_type":"code","execution_count":101,"metadata":{"executionInfo":{"elapsed":356,"status":"ok","timestamp":1736177995313,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"GPZUb19P1ys7"},"outputs":[],"source":["def f1_score_per_class(class_index):\n","    \"\"\"\n","    Calcola l'F1-score per una singola classe indicata da class_index.\n","    Args:\n","        class_index: indice della classe (intero).\n","    Returns:\n","        Una funzione che calcola l'F1-score per quella classe.\n","    \"\"\"\n","    def f1(y_true, y_pred):\n","        # Estrai le predizioni per la classe specifica\n","        y_true_class = y_true[:, class_index]\n","        y_pred_class = K.round(y_pred[:, class_index])  # Arrotonda per ottenere i valori binari\n","\n","        # True Positive\n","        tp = K.sum(y_true_class * y_pred_class)\n","        # Predicted Positive (TP + FP)\n","        predicted_positive = K.sum(y_pred_class)\n","        # Actual Positive (TP + FN)\n","        actual_positive = K.sum(y_true_class)\n","\n","        # Precision e Recall\n","        precision = tp / (predicted_positive + K.epsilon())\n","        recall = tp / (actual_positive + K.epsilon())\n","\n","        # F1-Score\n","        f1 = 2 * (precision * recall) / (precision + recall + K.epsilon())\n","        return f1\n","\n","    return f1\n","\n","# Esempio: Definiamo metriche F1 per ciascuna delle 6 classi\n","metrics = ['accuracy'] + [f1_score_per_class(i) for i in range(6)]"]},{"cell_type":"code","execution_count":100,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1736177992326,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"6sfJidrY16FO"},"outputs":[],"source":["early_stopping_callback = EarlyStopping(\n","    monitor = 'val_loss',    # Track validation loss\n","    patience = 20,           # Max number of epochs without improvements\n","    restore_best_weights = True\n",")"]},{"cell_type":"code","execution_count":108,"metadata":{"executionInfo":{"elapsed":297,"status":"ok","timestamp":1736179675662,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"CCW64KNARW1C"},"outputs":[],"source":["from tensorflow.keras.callbacks import ReduceLROnPlateau\n","\n","lr_scheduler = ReduceLROnPlateau(\n","    monitor='val_loss',    # Monitora la perdita di validazione\n","    factor=0.25,            # Riduce il learning rate del 50% (factor \u003c 1)\n","    patience=2,            # Numero di epoche senza miglioramento prima di ridurre\n","    min_lr=1e-6,           # Learning rate minimo consentito\n","    verbose=1              # Mostra messaggi nel log\n",")\n"]},{"cell_type":"code","execution_count":109,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":305},"executionInfo":{"elapsed":908,"status":"ok","timestamp":1736179680429,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"J-QwusD633tw","outputId":"b2886181-71df-4246-cd09-766d0361a358"},"outputs":[{"data":{"text/html":["\u003cpre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"\u003e\u003cspan style=\"font-weight: bold\"\u003eModel: \"functional_19\"\u003c/span\u003e\n","\u003c/pre\u003e\n"],"text/plain":["\u001b[1mModel: \"functional_19\"\u001b[0m\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["\u003cpre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"\u003e┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n","┃\u003cspan style=\"font-weight: bold\"\u003e Layer (type)                         \u003c/span\u003e┃\u003cspan style=\"font-weight: bold\"\u003e Output Shape                \u003c/span\u003e┃\u003cspan style=\"font-weight: bold\"\u003e         Param # \u003c/span\u003e┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n","│ input_layer_19 (\u003cspan style=\"color: #0087ff; text-decoration-color: #0087ff\"\u003eInputLayer\u003c/span\u003e)          │ (\u003cspan style=\"color: #00d7ff; text-decoration-color: #00d7ff\"\u003eNone\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e16\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e606\u003c/span\u003e)             │               \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e0\u003c/span\u003e │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ conv1d_24 (\u003cspan style=\"color: #0087ff; text-decoration-color: #0087ff\"\u003eConv1D\u003c/span\u003e)                   │ (\u003cspan style=\"color: #00d7ff; text-decoration-color: #00d7ff\"\u003eNone\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e12\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e64\u003c/span\u003e)              │         \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e193,984\u003c/span\u003e │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ global_max_pooling1d_19              │ (\u003cspan style=\"color: #00d7ff; text-decoration-color: #00d7ff\"\u003eNone\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e64\u003c/span\u003e)                  │               \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e0\u003c/span\u003e │\n","│ (\u003cspan style=\"color: #0087ff; text-decoration-color: #0087ff\"\u003eGlobalMaxPooling1D\u003c/span\u003e)                 │                             │                 │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dropout_31 (\u003cspan style=\"color: #0087ff; text-decoration-color: #0087ff\"\u003eDropout\u003c/span\u003e)                 │ (\u003cspan style=\"color: #00d7ff; text-decoration-color: #00d7ff\"\u003eNone\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e64\u003c/span\u003e)                  │               \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e0\u003c/span\u003e │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense_34 (\u003cspan style=\"color: #0087ff; text-decoration-color: #0087ff\"\u003eDense\u003c/span\u003e)                     │ (\u003cspan style=\"color: #00d7ff; text-decoration-color: #00d7ff\"\u003eNone\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e6\u003c/span\u003e)                   │             \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e390\u003c/span\u003e │\n","└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n","\u003c/pre\u003e\n"],"text/plain":["┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n","┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n","│ input_layer_19 (\u001b[38;5;33mInputLayer\u001b[0m)          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m606\u001b[0m)             │               \u001b[38;5;34m0\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ conv1d_24 (\u001b[38;5;33mConv1D\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m12\u001b[0m, \u001b[38;5;34m64\u001b[0m)              │         \u001b[38;5;34m193,984\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ global_max_pooling1d_19              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)                  │               \u001b[38;5;34m0\u001b[0m │\n","│ (\u001b[38;5;33mGlobalMaxPooling1D\u001b[0m)                 │                             │                 │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dropout_31 (\u001b[38;5;33mDropout\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)                  │               \u001b[38;5;34m0\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense_34 (\u001b[38;5;33mDense\u001b[0m)                     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m6\u001b[0m)                   │             \u001b[38;5;34m390\u001b[0m │\n","└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["\u003cpre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"\u003e\u003cspan style=\"font-weight: bold\"\u003e Total params: \u003c/span\u003e\u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e194,374\u003c/span\u003e (759.27 KB)\n","\u003c/pre\u003e\n"],"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m194,374\u001b[0m (759.27 KB)\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["\u003cpre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"\u003e\u003cspan style=\"font-weight: bold\"\u003e Trainable params: \u003c/span\u003e\u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e194,374\u003c/span\u003e (759.27 KB)\n","\u003c/pre\u003e\n"],"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m194,374\u001b[0m (759.27 KB)\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["\u003cpre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"\u003e\u003cspan style=\"font-weight: bold\"\u003e Non-trainable params: \u003c/span\u003e\u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e0\u003c/span\u003e (0.00 B)\n","\u003c/pre\u003e\n"],"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"]},"metadata":{},"output_type":"display_data"}],"source":["from tensorflow.keras.regularizers import l2\n","# Definizione della rete con Conv1D\n","inputs = keras.Input(shape=(16, 606))  # Input 3D\n","x = keras.layers.Conv1D(64, kernel_size=5, activation='relu', kernel_regularizer=l2(0.01))(inputs)  # Primo layer convoluzionale\n","#x = keras.layers.Conv1D(64, kernel_size=3, activation='relu')(x)  # Secondo layer convoluzionale\n","x = keras.layers.GlobalMaxPooling1D()(x)  # Pooling globale\n","x = keras.layers.Dropout(0.5)(x)  # Dropout\n","#x = keras.layers.Dense(128, activation='relu', kernel_regularizer=l2(0.01))(x)  # Layer denso\n","#x = keras.layers.Dropout(0.7)(x)  # Altro Dropout\n","outputs = keras.layers.Dense(6, activation='softmax')(x)  # Layer di output per classificazione\n","\n","# Creazione e compilazione del modello\n","model = keras.Model(inputs, outputs)\n","model.compile(optimizer='adam', loss=loss_function, metrics=metrics)\n","\n","model.summary()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"ikroljW4-p80"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 53ms/step - accuracy: 0.3875 - f1: 0.0497 - f1_1: 0.0698 - f1_2: 0.0522 - f1_3: 0.1672 - f1_4: 0.0990 - f1_5: 0.0204 - loss: 2.6651 - val_accuracy: 0.6772 - val_f1: 0.2577 - val_f1_1: 0.3490 - val_f1_2: 0.4091 - val_f1_3: 0.5213 - val_f1_4: 0.4200 - val_f1_5: 0.0000e+00 - val_loss: 1.7573 - learning_rate: 0.0010\n","Epoch 2/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 67ms/step - accuracy: 0.6137 - f1: 0.2457 - f1_1: 0.3318 - f1_2: 0.3927 - f1_3: 0.5712 - f1_4: 0.4946 - f1_5: 0.1787 - loss: 1.6832 - val_accuracy: 0.7149 - val_f1: 0.4003 - val_f1_1: 0.3282 - val_f1_2: 0.4761 - val_f1_3: 0.6880 - val_f1_4: 0.5048 - val_f1_5: 0.1360 - val_loss: 1.4656 - learning_rate: 0.0010\n","Epoch 3/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 48ms/step - accuracy: 0.6753 - f1: 0.3465 - f1_1: 0.4647 - f1_2: 0.4983 - f1_3: 0.6510 - f1_4: 0.5459 - f1_5: 0.3264 - loss: 1.4029 - val_accuracy: 0.7083 - val_f1: 0.3451 - val_f1_1: 0.3633 - val_f1_2: 0.4606 - val_f1_3: 0.6889 - val_f1_4: 0.5933 - val_f1_5: 0.1691 - val_loss: 1.3745 - learning_rate: 0.0010\n","Epoch 4/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 75ms/step - accuracy: 0.6884 - f1: 0.3755 - f1_1: 0.4049 - f1_2: 0.5609 - f1_3: 0.6768 - f1_4: 0.5972 - f1_5: 0.3613 - loss: 1.2835 - val_accuracy: 0.7307 - val_f1: 0.3426 - val_f1_1: 0.3442 - val_f1_2: 0.5082 - val_f1_3: 0.7619 - val_f1_4: 0.5581 - val_f1_5: 0.2672 - val_loss: 1.3494 - learning_rate: 0.0010\n","Epoch 5/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 46ms/step - accuracy: 0.6839 - f1: 0.3915 - f1_1: 0.3767 - f1_2: 0.4993 - f1_3: 0.6798 - f1_4: 0.5946 - f1_5: 0.3916 - loss: 1.2684 - val_accuracy: 0.7256 - val_f1: 0.3525 - val_f1_1: 0.3240 - val_f1_2: 0.4807 - val_f1_3: 0.7397 - val_f1_4: 0.5508 - val_f1_5: 0.2638 - val_loss: 1.3412 - learning_rate: 0.0010\n","Epoch 6/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 61ms/step - accuracy: 0.6998 - f1: 0.4162 - f1_1: 0.4319 - f1_2: 0.5639 - f1_3: 0.7020 - f1_4: 0.6110 - f1_5: 0.3880 - loss: 1.1939 - val_accuracy: 0.7066 - val_f1: 0.2625 - val_f1_1: 0.3104 - val_f1_2: 0.4890 - val_f1_3: 0.7204 - val_f1_4: 0.5270 - val_f1_5: 0.3475 - val_loss: 1.3177 - learning_rate: 0.0010\n","Epoch 7/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 49ms/step - accuracy: 0.6940 - f1: 0.3693 - f1_1: 0.5080 - f1_2: 0.5865 - f1_3: 0.6918 - f1_4: 0.6315 - f1_5: 0.4461 - loss: 1.2054 - val_accuracy: 0.6755 - val_f1: 0.3568 - val_f1_1: 0.2681 - val_f1_2: 0.4689 - val_f1_3: 0.6994 - val_f1_4: 0.4827 - val_f1_5: 0.3529 - val_loss: 1.3613 - learning_rate: 0.0010\n","Epoch 8/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 44ms/step - accuracy: 0.7075 - f1: 0.4280 - f1_1: 0.4481 - f1_2: 0.6120 - f1_3: 0.7261 - f1_4: 0.5987 - f1_5: 0.4357 - loss: 1.1441 - val_accuracy: 0.6781 - val_f1: 0.4075 - val_f1_1: 0.3645 - val_f1_2: 0.4256 - val_f1_3: 0.6305 - val_f1_4: 0.5869 - val_f1_5: 0.3863 - val_loss: 1.2817 - learning_rate: 0.0010\n","Epoch 9/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 71ms/step - accuracy: 0.7064 - f1: 0.4218 - f1_1: 0.4477 - f1_2: 0.5946 - f1_3: 0.7089 - f1_4: 0.6143 - f1_5: 0.4390 - loss: 1.1266 - val_accuracy: 0.6894 - val_f1: 0.4004 - val_f1_1: 0.4087 - val_f1_2: 0.4710 - val_f1_3: 0.6904 - val_f1_4: 0.5647 - val_f1_5: 0.4339 - val_loss: 1.2719 - learning_rate: 0.0010\n","Epoch 10/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 45ms/step - accuracy: 0.7005 - f1: 0.4610 - f1_1: 0.5176 - f1_2: 0.6096 - f1_3: 0.7037 - f1_4: 0.6263 - f1_5: 0.4578 - loss: 1.0910 - val_accuracy: 0.7098 - val_f1: 0.3983 - val_f1_1: 0.3587 - val_f1_2: 0.4931 - val_f1_3: 0.7163 - val_f1_4: 0.5863 - val_f1_5: 0.3870 - val_loss: 1.3134 - learning_rate: 0.0010\n","Epoch 11/100\n","\u001b[1m110/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 63ms/step - accuracy: 0.7110 - f1: 0.4377 - f1_1: 0.4275 - f1_2: 0.5744 - f1_3: 0.7133 - f1_4: 0.6050 - f1_5: 0.4438 - loss: 1.1514\n","Epoch 11: ReduceLROnPlateau reducing learning rate to 0.0002500000118743628.\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 75ms/step - accuracy: 0.7110 - f1: 0.4375 - f1_1: 0.4283 - f1_2: 0.5742 - f1_3: 0.7134 - f1_4: 0.6053 - f1_5: 0.4438 - loss: 1.1516 - val_accuracy: 0.7321 - val_f1: 0.4492 - val_f1_1: 0.3440 - val_f1_2: 0.4511 - val_f1_3: 0.7532 - val_f1_4: 0.5874 - val_f1_5: 0.3590 - val_loss: 1.3287 - learning_rate: 0.0010\n","Epoch 12/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 46ms/step - accuracy: 0.7366 - f1: 0.5273 - f1_1: 0.5453 - f1_2: 0.5924 - f1_3: 0.7522 - f1_4: 0.6329 - f1_5: 0.4906 - loss: 1.0590 - val_accuracy: 0.7414 - val_f1: 0.4322 - val_f1_1: 0.3813 - val_f1_2: 0.4882 - val_f1_3: 0.7850 - val_f1_4: 0.6229 - val_f1_5: 0.3945 - val_loss: 1.2620 - learning_rate: 2.5000e-04\n","Epoch 13/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 46ms/step - accuracy: 0.7387 - f1: 0.5001 - f1_1: 0.6244 - f1_2: 0.6011 - f1_3: 0.7434 - f1_4: 0.6513 - f1_5: 0.4970 - loss: 0.9759 - val_accuracy: 0.7361 - val_f1: 0.4738 - val_f1_1: 0.3682 - val_f1_2: 0.5086 - val_f1_3: 0.7721 - val_f1_4: 0.6137 - val_f1_5: 0.4077 - val_loss: 1.2223 - learning_rate: 2.5000e-04\n","Epoch 14/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 69ms/step - accuracy: 0.7530 - f1: 0.4929 - f1_1: 0.6266 - f1_2: 0.7088 - f1_3: 0.7628 - f1_4: 0.6699 - f1_5: 0.5471 - loss: 0.9441 - val_accuracy: 0.7103 - val_f1: 0.4651 - val_f1_1: 0.3730 - val_f1_2: 0.5348 - val_f1_3: 0.7153 - val_f1_4: 0.6093 - val_f1_5: 0.4420 - val_loss: 1.1995 - learning_rate: 2.5000e-04\n","Epoch 15/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 45ms/step - accuracy: 0.7437 - f1: 0.5547 - f1_1: 0.5543 - f1_2: 0.6909 - f1_3: 0.7403 - f1_4: 0.6709 - f1_5: 0.5296 - loss: 0.9086 - val_accuracy: 0.7431 - val_f1: 0.4603 - val_f1_1: 0.3823 - val_f1_2: 0.5093 - val_f1_3: 0.7792 - val_f1_4: 0.6260 - val_f1_5: 0.3837 - val_loss: 1.1825 - learning_rate: 2.5000e-04\n","Epoch 16/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 67ms/step - accuracy: 0.7537 - f1: 0.5424 - f1_1: 0.5914 - f1_2: 0.7084 - f1_3: 0.7568 - f1_4: 0.6915 - f1_5: 0.5314 - loss: 0.8829 - val_accuracy: 0.7471 - val_f1: 0.4314 - val_f1_1: 0.3798 - val_f1_2: 0.4777 - val_f1_3: 0.7912 - val_f1_4: 0.6368 - val_f1_5: 0.3954 - val_loss: 1.1930 - learning_rate: 2.5000e-04\n","Epoch 17/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 45ms/step - accuracy: 0.7560 - f1: 0.5466 - f1_1: 0.6049 - f1_2: 0.6812 - f1_3: 0.7525 - f1_4: 0.7174 - f1_5: 0.5331 - loss: 0.8639 - val_accuracy: 0.7423 - val_f1: 0.4930 - val_f1_1: 0.3597 - val_f1_2: 0.4894 - val_f1_3: 0.7739 - val_f1_4: 0.6187 - val_f1_5: 0.4104 - val_loss: 1.1700 - learning_rate: 2.5000e-04\n","Epoch 18/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 44ms/step - accuracy: 0.7620 - f1: 0.5397 - f1_1: 0.5809 - f1_2: 0.6625 - f1_3: 0.7675 - f1_4: 0.6953 - f1_5: 0.5569 - loss: 0.8333 - val_accuracy: 0.7460 - val_f1: 0.4424 - val_f1_1: 0.3526 - val_f1_2: 0.4878 - val_f1_3: 0.7770 - val_f1_4: 0.6112 - val_f1_5: 0.4525 - val_loss: 1.1608 - learning_rate: 2.5000e-04\n","Epoch 19/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 71ms/step - accuracy: 0.7646 - f1: 0.5454 - f1_1: 0.6855 - f1_2: 0.7358 - f1_3: 0.7563 - f1_4: 0.6882 - f1_5: 0.5625 - loss: 0.8387 - val_accuracy: 0.7477 - val_f1: 0.4386 - val_f1_1: 0.3706 - val_f1_2: 0.5030 - val_f1_3: 0.7882 - val_f1_4: 0.6242 - val_f1_5: 0.3787 - val_loss: 1.1444 - learning_rate: 2.5000e-04\n","Epoch 20/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 47ms/step - accuracy: 0.7623 - f1: 0.5495 - f1_1: 0.6372 - f1_2: 0.7372 - f1_3: 0.7567 - f1_4: 0.6862 - f1_5: 0.5521 - loss: 0.8319 - val_accuracy: 0.7281 - val_f1: 0.4816 - val_f1_1: 0.3587 - val_f1_2: 0.5108 - val_f1_3: 0.7482 - val_f1_4: 0.6164 - val_f1_5: 0.4125 - val_loss: 1.1444 - learning_rate: 2.5000e-04\n","Epoch 21/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.7618 - f1: 0.5704 - f1_1: 0.5582 - f1_2: 0.7545 - f1_3: 0.7593 - f1_4: 0.7323 - f1_5: 0.5319 - loss: 0.8305\n","Epoch 21: ReduceLROnPlateau reducing learning rate to 6.25000029685907e-05.\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 45ms/step - accuracy: 0.7618 - f1: 0.5703 - f1_1: 0.5585 - f1_2: 0.7542 - f1_3: 0.7594 - f1_4: 0.7322 - f1_5: 0.5320 - loss: 0.8305 - val_accuracy: 0.7463 - val_f1: 0.4856 - val_f1_1: 0.3752 - val_f1_2: 0.4616 - val_f1_3: 0.7774 - val_f1_4: 0.6413 - val_f1_5: 0.4073 - val_loss: 1.1560 - learning_rate: 2.5000e-04\n","Epoch 22/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 60ms/step - accuracy: 0.7697 - f1: 0.6057 - f1_1: 0.6759 - f1_2: 0.7698 - f1_3: 0.7661 - f1_4: 0.6961 - f1_5: 0.5598 - loss: 0.7821 - val_accuracy: 0.7477 - val_f1: 0.4863 - val_f1_1: 0.3752 - val_f1_2: 0.4652 - val_f1_3: 0.7863 - val_f1_4: 0.6392 - val_f1_5: 0.4185 - val_loss: 1.1458 - learning_rate: 6.2500e-05\n","Epoch 23/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 46ms/step - accuracy: 0.7737 - f1: 0.5883 - f1_1: 0.7106 - f1_2: 0.7146 - f1_3: 0.7685 - f1_4: 0.7309 - f1_5: 0.5656 - loss: 0.7840 - val_accuracy: 0.7471 - val_f1: 0.4883 - val_f1_1: 0.3752 - val_f1_2: 0.4735 - val_f1_3: 0.7865 - val_f1_4: 0.6301 - val_f1_5: 0.4355 - val_loss: 1.1391 - learning_rate: 6.2500e-05\n","Epoch 24/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 66ms/step - accuracy: 0.7779 - f1: 0.5856 - f1_1: 0.6695 - f1_2: 0.7663 - f1_3: 0.7816 - f1_4: 0.7000 - f1_5: 0.5817 - loss: 0.7852 - val_accuracy: 0.7508 - val_f1: 0.5045 - val_f1_1: 0.3704 - val_f1_2: 0.4878 - val_f1_3: 0.7878 - val_f1_4: 0.6277 - val_f1_5: 0.4346 - val_loss: 1.1436 - learning_rate: 6.2500e-05\n","Epoch 25/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step - accuracy: 0.7847 - f1: 0.6113 - f1_1: 0.6635 - f1_2: 0.7791 - f1_3: 0.7757 - f1_4: 0.7123 - f1_5: 0.5829 - loss: 0.7621\n","Epoch 25: ReduceLROnPlateau reducing learning rate to 1.5625000742147677e-05.\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 44ms/step - accuracy: 0.7847 - f1: 0.6111 - f1_1: 0.6638 - f1_2: 0.7786 - f1_3: 0.7756 - f1_4: 0.7123 - f1_5: 0.5828 - loss: 0.7622 - val_accuracy: 0.7593 - val_f1: 0.5024 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7994 - val_f1_4: 0.6302 - val_f1_5: 0.4262 - val_loss: 1.1460 - learning_rate: 6.2500e-05\n","Epoch 26/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 64ms/step - accuracy: 0.7833 - f1: 0.6040 - f1_1: 0.6521 - f1_2: 0.7577 - f1_3: 0.7812 - f1_4: 0.7397 - f1_5: 0.5826 - loss: 0.7665 - val_accuracy: 0.7553 - val_f1: 0.5039 - val_f1_1: 0.3728 - val_f1_2: 0.4890 - val_f1_3: 0.7920 - val_f1_4: 0.6279 - val_f1_5: 0.4331 - val_loss: 1.1392 - learning_rate: 1.5625e-05\n","Epoch 27/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 50ms/step - accuracy: 0.7818 - f1: 0.5844 - f1_1: 0.7604 - f1_2: 0.7602 - f1_3: 0.7688 - f1_4: 0.7413 - f1_5: 0.5709 - loss: 0.7569 - val_accuracy: 0.7567 - val_f1: 0.5055 - val_f1_1: 0.3752 - val_f1_2: 0.4771 - val_f1_3: 0.7956 - val_f1_4: 0.6287 - val_f1_5: 0.4190 - val_loss: 1.1378 - learning_rate: 1.5625e-05\n","Epoch 28/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 69ms/step - accuracy: 0.7774 - f1: 0.5879 - f1_1: 0.5925 - f1_2: 0.7321 - f1_3: 0.7752 - f1_4: 0.6960 - f1_5: 0.5656 - loss: 0.7680 - val_accuracy: 0.7556 - val_f1: 0.5067 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7932 - val_f1_4: 0.6299 - val_f1_5: 0.4237 - val_loss: 1.1381 - learning_rate: 1.5625e-05\n","Epoch 29/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 45ms/step - accuracy: 0.7811 - f1: 0.5996 - f1_1: 0.7609 - f1_2: 0.6877 - f1_3: 0.7750 - f1_4: 0.7233 - f1_5: 0.5687 - loss: 0.7738 - val_accuracy: 0.7539 - val_f1: 0.5062 - val_f1_1: 0.3752 - val_f1_2: 0.4771 - val_f1_3: 0.7910 - val_f1_4: 0.6279 - val_f1_5: 0.4291 - val_loss: 1.1373 - learning_rate: 1.5625e-05\n","Epoch 30/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 60ms/step - accuracy: 0.7874 - f1: 0.6235 - f1_1: 0.7089 - f1_2: 0.7293 - f1_3: 0.7702 - f1_4: 0.7099 - f1_5: 0.6097 - loss: 0.7510 - val_accuracy: 0.7550 - val_f1: 0.5031 - val_f1_1: 0.3752 - val_f1_2: 0.4771 - val_f1_3: 0.7941 - val_f1_4: 0.6279 - val_f1_5: 0.4219 - val_loss: 1.1357 - learning_rate: 1.5625e-05\n","Epoch 31/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 55ms/step - accuracy: 0.7822 - f1: 0.6015 - f1_1: 0.6836 - f1_2: 0.6976 - f1_3: 0.7767 - f1_4: 0.7399 - f1_5: 0.5478 - loss: 0.7624 - val_accuracy: 0.7522 - val_f1: 0.4998 - val_f1_1: 0.3752 - val_f1_2: 0.4852 - val_f1_3: 0.7929 - val_f1_4: 0.6279 - val_f1_5: 0.4260 - val_loss: 1.1324 - learning_rate: 1.5625e-05\n","Epoch 32/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 73ms/step - accuracy: 0.7774 - f1: 0.5915 - f1_1: 0.7361 - f1_2: 0.7345 - f1_3: 0.7718 - f1_4: 0.7378 - f1_5: 0.5834 - loss: 0.7531 - val_accuracy: 0.7547 - val_f1: 0.5017 - val_f1_1: 0.3752 - val_f1_2: 0.4852 - val_f1_3: 0.7936 - val_f1_4: 0.6279 - val_f1_5: 0.4312 - val_loss: 1.1340 - learning_rate: 1.5625e-05\n","Epoch 33/100\n","\u001b[1m110/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.7868 - f1: 0.6056 - f1_1: 0.6824 - f1_2: 0.7553 - f1_3: 0.7722 - f1_4: 0.7372 - f1_5: 0.5914 - loss: 0.7376\n","Epoch 33: ReduceLROnPlateau reducing learning rate to 3.906250185536919e-06.\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 45ms/step - accuracy: 0.7867 - f1: 0.6053 - f1_1: 0.6823 - f1_2: 0.7551 - f1_3: 0.7723 - f1_4: 0.7368 - f1_5: 0.5912 - loss: 0.7378 - val_accuracy: 0.7550 - val_f1: 0.5010 - val_f1_1: 0.3752 - val_f1_2: 0.4830 - val_f1_3: 0.7976 - val_f1_4: 0.6299 - val_f1_5: 0.4297 - val_loss: 1.1375 - learning_rate: 1.5625e-05\n","Epoch 34/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 69ms/step - accuracy: 0.7788 - f1: 0.5947 - f1_1: 0.6718 - f1_2: 0.6395 - f1_3: 0.7770 - f1_4: 0.7050 - f1_5: 0.5821 - loss: 0.7603 - val_accuracy: 0.7533 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4830 - val_f1_3: 0.7935 - val_f1_4: 0.6279 - val_f1_5: 0.4335 - val_loss: 1.1367 - learning_rate: 3.9063e-06\n","Epoch 35/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.7820 - f1: 0.6033 - f1_1: 0.6601 - f1_2: 0.7491 - f1_3: 0.7775 - f1_4: 0.7186 - f1_5: 0.6018 - loss: 0.7461\n","Epoch 35: ReduceLROnPlateau reducing learning rate to 1e-06.\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 47ms/step - accuracy: 0.7820 - f1: 0.6034 - f1_1: 0.6603 - f1_2: 0.7492 - f1_3: 0.7775 - f1_4: 0.7186 - f1_5: 0.6017 - loss: 0.7461 - val_accuracy: 0.7539 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7943 - val_f1_4: 0.6279 - val_f1_5: 0.4324 - val_loss: 1.1362 - learning_rate: 3.9063e-06\n","Epoch 36/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 47ms/step - accuracy: 0.7800 - f1: 0.5622 - f1_1: 0.6677 - f1_2: 0.6804 - f1_3: 0.7783 - f1_4: 0.7254 - f1_5: 0.5928 - loss: 0.7591 - val_accuracy: 0.7542 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7943 - val_f1_4: 0.6279 - val_f1_5: 0.4324 - val_loss: 1.1359 - learning_rate: 1.0000e-06\n","Epoch 37/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 69ms/step - accuracy: 0.7773 - f1: 0.6221 - f1_1: 0.6571 - f1_2: 0.7442 - f1_3: 0.7760 - f1_4: 0.7256 - f1_5: 0.6064 - loss: 0.7393 - val_accuracy: 0.7542 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7946 - val_f1_4: 0.6279 - val_f1_5: 0.4329 - val_loss: 1.1355 - learning_rate: 1.0000e-06\n","Epoch 38/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 47ms/step - accuracy: 0.7797 - f1: 0.6197 - f1_1: 0.7305 - f1_2: 0.6777 - f1_3: 0.7743 - f1_4: 0.7288 - f1_5: 0.5574 - loss: 0.7588 - val_accuracy: 0.7539 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7931 - val_f1_4: 0.6279 - val_f1_5: 0.4323 - val_loss: 1.1350 - learning_rate: 1.0000e-06\n","Epoch 39/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 46ms/step - accuracy: 0.7733 - f1: 0.5865 - f1_1: 0.7774 - f1_2: 0.6832 - f1_3: 0.7652 - f1_4: 0.7411 - f1_5: 0.5707 - loss: 0.7468 - val_accuracy: 0.7539 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7937 - val_f1_4: 0.6279 - val_f1_5: 0.4332 - val_loss: 1.1350 - learning_rate: 1.0000e-06\n","Epoch 40/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 53ms/step - accuracy: 0.7826 - f1: 0.5693 - f1_1: 0.6811 - f1_2: 0.6640 - f1_3: 0.7748 - f1_4: 0.7106 - f1_5: 0.5695 - loss: 0.7474 - val_accuracy: 0.7547 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7949 - val_f1_4: 0.6287 - val_f1_5: 0.4337 - val_loss: 1.1352 - learning_rate: 1.0000e-06\n","Epoch 41/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 45ms/step - accuracy: 0.7847 - f1: 0.5834 - f1_1: 0.6811 - f1_2: 0.7461 - f1_3: 0.7783 - f1_4: 0.7493 - f1_5: 0.5769 - loss: 0.7298 - val_accuracy: 0.7550 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7953 - val_f1_4: 0.6287 - val_f1_5: 0.4340 - val_loss: 1.1351 - learning_rate: 1.0000e-06\n","Epoch 42/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 69ms/step - accuracy: 0.7774 - f1: 0.6173 - f1_1: 0.7277 - f1_2: 0.6703 - f1_3: 0.7749 - f1_4: 0.7016 - f1_5: 0.5800 - loss: 0.7485 - val_accuracy: 0.7545 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7946 - val_f1_4: 0.6287 - val_f1_5: 0.4340 - val_loss: 1.1347 - learning_rate: 1.0000e-06\n","Epoch 43/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 47ms/step - accuracy: 0.7857 - f1: 0.6190 - f1_1: 0.6632 - f1_2: 0.7405 - f1_3: 0.7712 - f1_4: 0.7090 - f1_5: 0.5963 - loss: 0.7492 - val_accuracy: 0.7545 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4852 - val_f1_3: 0.7940 - val_f1_4: 0.6287 - val_f1_5: 0.4323 - val_loss: 1.1342 - learning_rate: 1.0000e-06\n","Epoch 44/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 59ms/step - accuracy: 0.7721 - f1: 0.5902 - f1_1: 0.6778 - f1_2: 0.7467 - f1_3: 0.7687 - f1_4: 0.7089 - f1_5: 0.5774 - loss: 0.7466 - val_accuracy: 0.7542 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4852 - val_f1_3: 0.7937 - val_f1_4: 0.6287 - val_f1_5: 0.4335 - val_loss: 1.1344 - learning_rate: 1.0000e-06\n","Epoch 45/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 47ms/step - accuracy: 0.7822 - f1: 0.6147 - f1_1: 0.7061 - f1_2: 0.7509 - f1_3: 0.7752 - f1_4: 0.7462 - f1_5: 0.6000 - loss: 0.7364 - val_accuracy: 0.7539 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4852 - val_f1_3: 0.7925 - val_f1_4: 0.6287 - val_f1_5: 0.4349 - val_loss: 1.1339 - learning_rate: 1.0000e-06\n","Epoch 46/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 70ms/step - accuracy: 0.7855 - f1: 0.6056 - f1_1: 0.6833 - f1_2: 0.7557 - f1_3: 0.7736 - f1_4: 0.7104 - f1_5: 0.5658 - loss: 0.7512 - val_accuracy: 0.7547 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7940 - val_f1_4: 0.6287 - val_f1_5: 0.4323 - val_loss: 1.1344 - learning_rate: 1.0000e-06\n","Epoch 47/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 48ms/step - accuracy: 0.7795 - f1: 0.5881 - f1_1: 0.6308 - f1_2: 0.7438 - f1_3: 0.7763 - f1_4: 0.7060 - f1_5: 0.5904 - loss: 0.7629 - val_accuracy: 0.7545 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4852 - val_f1_3: 0.7932 - val_f1_4: 0.6287 - val_f1_5: 0.4341 - val_loss: 1.1342 - learning_rate: 1.0000e-06\n","Epoch 48/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 47ms/step - accuracy: 0.7803 - f1: 0.6057 - f1_1: 0.6909 - f1_2: 0.7842 - f1_3: 0.7736 - f1_4: 0.7083 - f1_5: 0.5972 - loss: 0.7385 - val_accuracy: 0.7550 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4852 - val_f1_3: 0.7947 - val_f1_4: 0.6287 - val_f1_5: 0.4323 - val_loss: 1.1344 - learning_rate: 1.0000e-06\n","Epoch 49/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 61ms/step - accuracy: 0.7780 - f1: 0.5853 - f1_1: 0.5938 - f1_2: 0.7062 - f1_3: 0.7731 - f1_4: 0.6945 - f1_5: 0.5877 - loss: 0.7650 - val_accuracy: 0.7550 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4852 - val_f1_3: 0.7956 - val_f1_4: 0.6287 - val_f1_5: 0.4326 - val_loss: 1.1345 - learning_rate: 1.0000e-06\n","Epoch 50/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 45ms/step - accuracy: 0.7818 - f1: 0.6077 - f1_1: 0.6620 - f1_2: 0.7537 - f1_3: 0.7673 - f1_4: 0.7424 - f1_5: 0.6000 - loss: 0.7242 - val_accuracy: 0.7556 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4852 - val_f1_3: 0.7962 - val_f1_4: 0.6287 - val_f1_5: 0.4340 - val_loss: 1.1346 - learning_rate: 1.0000e-06\n","Epoch 51/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 74ms/step - accuracy: 0.7855 - f1: 0.5973 - f1_1: 0.7433 - f1_2: 0.8032 - f1_3: 0.7732 - f1_4: 0.7216 - f1_5: 0.5768 - loss: 0.7543 - val_accuracy: 0.7553 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4852 - val_f1_3: 0.7956 - val_f1_4: 0.6287 - val_f1_5: 0.4340 - val_loss: 1.1345 - learning_rate: 1.0000e-06\n","Epoch 52/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 47ms/step - accuracy: 0.7814 - f1: 0.6028 - f1_1: 0.6921 - f1_2: 0.7208 - f1_3: 0.7823 - f1_4: 0.6949 - f1_5: 0.5792 - loss: 0.7437 - val_accuracy: 0.7550 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4852 - val_f1_3: 0.7944 - val_f1_4: 0.6287 - val_f1_5: 0.4331 - val_loss: 1.1344 - learning_rate: 1.0000e-06\n","Epoch 53/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 67ms/step - accuracy: 0.7851 - f1: 0.6025 - f1_1: 0.6384 - f1_2: 0.7490 - f1_3: 0.7769 - f1_4: 0.7391 - f1_5: 0.5748 - loss: 0.7447 - val_accuracy: 0.7550 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4852 - val_f1_3: 0.7939 - val_f1_4: 0.6287 - val_f1_5: 0.4331 - val_loss: 1.1341 - learning_rate: 1.0000e-06\n","Epoch 54/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 47ms/step - accuracy: 0.7794 - f1: 0.6177 - f1_1: 0.6043 - f1_2: 0.6690 - f1_3: 0.7696 - f1_4: 0.7095 - f1_5: 0.5795 - loss: 0.7513 - val_accuracy: 0.7553 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4852 - val_f1_3: 0.7945 - val_f1_4: 0.6287 - val_f1_5: 0.4331 - val_loss: 1.1340 - learning_rate: 1.0000e-06\n","Epoch 55/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 48ms/step - accuracy: 0.7901 - f1: 0.6107 - f1_1: 0.6876 - f1_2: 0.7774 - f1_3: 0.7865 - f1_4: 0.7138 - f1_5: 0.5960 - loss: 0.7501 - val_accuracy: 0.7545 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4852 - val_f1_3: 0.7940 - val_f1_4: 0.6287 - val_f1_5: 0.4331 - val_loss: 1.1338 - learning_rate: 1.0000e-06\n","Epoch 56/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 46ms/step - accuracy: 0.7824 - f1: 0.5828 - f1_1: 0.6582 - f1_2: 0.7936 - f1_3: 0.7689 - f1_4: 0.7362 - f1_5: 0.5845 - loss: 0.7420 - val_accuracy: 0.7545 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4852 - val_f1_3: 0.7933 - val_f1_4: 0.6279 - val_f1_5: 0.4344 - val_loss: 1.1338 - learning_rate: 1.0000e-06\n","Epoch 57/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 53ms/step - accuracy: 0.7806 - f1: 0.6059 - f1_1: 0.7104 - f1_2: 0.7772 - f1_3: 0.7752 - f1_4: 0.6958 - f1_5: 0.6044 - loss: 0.7405 - val_accuracy: 0.7553 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7955 - val_f1_4: 0.6287 - val_f1_5: 0.4349 - val_loss: 1.1342 - learning_rate: 1.0000e-06\n","Epoch 58/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 47ms/step - accuracy: 0.7845 - f1: 0.5871 - f1_1: 0.6315 - f1_2: 0.7919 - f1_3: 0.7815 - f1_4: 0.7230 - f1_5: 0.5861 - loss: 0.7527 - val_accuracy: 0.7545 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4852 - val_f1_3: 0.7933 - val_f1_4: 0.6279 - val_f1_5: 0.4340 - val_loss: 1.1337 - learning_rate: 1.0000e-06\n","Epoch 59/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 46ms/step - accuracy: 0.7833 - f1: 0.5836 - f1_1: 0.7397 - f1_2: 0.7340 - f1_3: 0.7845 - f1_4: 0.7004 - f1_5: 0.5838 - loss: 0.7536 - val_accuracy: 0.7547 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7942 - val_f1_4: 0.6287 - val_f1_5: 0.4358 - val_loss: 1.1336 - learning_rate: 1.0000e-06\n","Epoch 60/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 67ms/step - accuracy: 0.7786 - f1: 0.6257 - f1_1: 0.5491 - f1_2: 0.7473 - f1_3: 0.7691 - f1_4: 0.7185 - f1_5: 0.5659 - loss: 0.7497 - val_accuracy: 0.7556 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7957 - val_f1_4: 0.6287 - val_f1_5: 0.4349 - val_loss: 1.1340 - learning_rate: 1.0000e-06\n","Epoch 61/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 45ms/step - accuracy: 0.7820 - f1: 0.5760 - f1_1: 0.6756 - f1_2: 0.7397 - f1_3: 0.7781 - f1_4: 0.7303 - f1_5: 0.5781 - loss: 0.7556 - val_accuracy: 0.7550 - val_f1: 0.5051 - val_f1_1: 0.3752 - val_f1_2: 0.4890 - val_f1_3: 0.7944 - val_f1_4: 0.6287 - val_f1_5: 0.4352 - val_loss: 1.1335 - learning_rate: 1.0000e-06\n","Epoch 62/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 70ms/step - accuracy: 0.7796 - f1: 0.5983 - f1_1: 0.6567 - f1_2: 0.6555 - f1_3: 0.7717 - f1_4: 0.7168 - f1_5: 0.5844 - loss: 0.7442 - val_accuracy: 0.7550 - val_f1: 0.5051 - val_f1_1: 0.3752 - val_f1_2: 0.4890 - val_f1_3: 0.7944 - val_f1_4: 0.6287 - val_f1_5: 0.4358 - val_loss: 1.1333 - learning_rate: 1.0000e-06\n","Epoch 63/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 44ms/step - accuracy: 0.7848 - f1: 0.6076 - f1_1: 0.6624 - f1_2: 0.7176 - f1_3: 0.7729 - f1_4: 0.7207 - f1_5: 0.5834 - loss: 0.7443 - val_accuracy: 0.7550 - val_f1: 0.5051 - val_f1_1: 0.3752 - val_f1_2: 0.4890 - val_f1_3: 0.7938 - val_f1_4: 0.6287 - val_f1_5: 0.4358 - val_loss: 1.1333 - learning_rate: 1.0000e-06\n","Epoch 64/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 47ms/step - accuracy: 0.7826 - f1: 0.6124 - f1_1: 0.6571 - f1_2: 0.7334 - f1_3: 0.7767 - f1_4: 0.7262 - f1_5: 0.5916 - loss: 0.7581 - val_accuracy: 0.7545 - val_f1: 0.5051 - val_f1_1: 0.3752 - val_f1_2: 0.4890 - val_f1_3: 0.7929 - val_f1_4: 0.6287 - val_f1_5: 0.4352 - val_loss: 1.1328 - learning_rate: 1.0000e-06\n","Epoch 65/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 68ms/step - accuracy: 0.7847 - f1: 0.6169 - f1_1: 0.6381 - f1_2: 0.6843 - f1_3: 0.7818 - f1_4: 0.7189 - f1_5: 0.5710 - loss: 0.7383 - val_accuracy: 0.7542 - val_f1: 0.5051 - val_f1_1: 0.3752 - val_f1_2: 0.4890 - val_f1_3: 0.7924 - val_f1_4: 0.6279 - val_f1_5: 0.4352 - val_loss: 1.1326 - learning_rate: 1.0000e-06\n","Epoch 66/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 44ms/step - accuracy: 0.7824 - f1: 0.5928 - f1_1: 0.7774 - f1_2: 0.7351 - f1_3: 0.7761 - f1_4: 0.7300 - f1_5: 0.5686 - loss: 0.7538 - val_accuracy: 0.7539 - val_f1: 0.5051 - val_f1_1: 0.3752 - val_f1_2: 0.4890 - val_f1_3: 0.7918 - val_f1_4: 0.6279 - val_f1_5: 0.4352 - val_loss: 1.1326 - learning_rate: 1.0000e-06\n","Epoch 67/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 68ms/step - accuracy: 0.7830 - f1: 0.6070 - f1_1: 0.6748 - f1_2: 0.7251 - f1_3: 0.7702 - f1_4: 0.7224 - f1_5: 0.5928 - loss: 0.7377 - val_accuracy: 0.7542 - val_f1: 0.5051 - val_f1_1: 0.3752 - val_f1_2: 0.4890 - val_f1_3: 0.7921 - val_f1_4: 0.6287 - val_f1_5: 0.4352 - val_loss: 1.1325 - learning_rate: 1.0000e-06\n","Epoch 68/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 46ms/step - accuracy: 0.7863 - f1: 0.6077 - f1_1: 0.6689 - f1_2: 0.6369 - f1_3: 0.7765 - f1_4: 0.7103 - f1_5: 0.5996 - loss: 0.7361 - val_accuracy: 0.7547 - val_f1: 0.5051 - val_f1_1: 0.3752 - val_f1_2: 0.4852 - val_f1_3: 0.7929 - val_f1_4: 0.6287 - val_f1_5: 0.4352 - val_loss: 1.1326 - learning_rate: 1.0000e-06\n","Epoch 69/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 46ms/step - accuracy: 0.7712 - f1: 0.6036 - f1_1: 0.7857 - f1_2: 0.7181 - f1_3: 0.7645 - f1_4: 0.7449 - f1_5: 0.5650 - loss: 0.7668 - val_accuracy: 0.7539 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4852 - val_f1_3: 0.7918 - val_f1_4: 0.6279 - val_f1_5: 0.4380 - val_loss: 1.1326 - learning_rate: 1.0000e-06\n","Epoch 70/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 72ms/step - accuracy: 0.7844 - f1: 0.5909 - f1_1: 0.7395 - f1_2: 0.7621 - f1_3: 0.7682 - f1_4: 0.7247 - f1_5: 0.5863 - loss: 0.7370 - val_accuracy: 0.7539 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4852 - val_f1_3: 0.7921 - val_f1_4: 0.6279 - val_f1_5: 0.4386 - val_loss: 1.1330 - learning_rate: 1.0000e-06\n","Epoch 71/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 47ms/step - accuracy: 0.7778 - f1: 0.5865 - f1_1: 0.6813 - f1_2: 0.7224 - f1_3: 0.7672 - f1_4: 0.7223 - f1_5: 0.5828 - loss: 0.7650 - val_accuracy: 0.7556 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4852 - val_f1_3: 0.7927 - val_f1_4: 0.6287 - val_f1_5: 0.4358 - val_loss: 1.1330 - learning_rate: 1.0000e-06\n","Epoch 72/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 73ms/step - accuracy: 0.7837 - f1: 0.5699 - f1_1: 0.7653 - f1_2: 0.7455 - f1_3: 0.7763 - f1_4: 0.7285 - f1_5: 0.5782 - loss: 0.7541 - val_accuracy: 0.7556 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4852 - val_f1_3: 0.7929 - val_f1_4: 0.6287 - val_f1_5: 0.4358 - val_loss: 1.1328 - learning_rate: 1.0000e-06\n","Epoch 73/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 47ms/step - accuracy: 0.7838 - f1: 0.6045 - f1_1: 0.6869 - f1_2: 0.7547 - f1_3: 0.7684 - f1_4: 0.7082 - f1_5: 0.5853 - loss: 0.7462 - val_accuracy: 0.7550 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4852 - val_f1_3: 0.7927 - val_f1_4: 0.6287 - val_f1_5: 0.4358 - val_loss: 1.1331 - learning_rate: 1.0000e-06\n","Epoch 74/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 63ms/step - accuracy: 0.7832 - f1: 0.6084 - f1_1: 0.7132 - f1_2: 0.7161 - f1_3: 0.7788 - f1_4: 0.7127 - f1_5: 0.5807 - loss: 0.7477 - val_accuracy: 0.7545 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4852 - val_f1_3: 0.7921 - val_f1_4: 0.6287 - val_f1_5: 0.4386 - val_loss: 1.1329 - learning_rate: 1.0000e-06\n","Epoch 75/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 47ms/step - accuracy: 0.7773 - f1: 0.6046 - f1_1: 0.7263 - f1_2: 0.7449 - f1_3: 0.7667 - f1_4: 0.7143 - f1_5: 0.5836 - loss: 0.7488 - val_accuracy: 0.7536 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7915 - val_f1_4: 0.6279 - val_f1_5: 0.4386 - val_loss: 1.1330 - learning_rate: 1.0000e-06\n","Epoch 76/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 45ms/step - accuracy: 0.7836 - f1: 0.5900 - f1_1: 0.6167 - f1_2: 0.6868 - f1_3: 0.7749 - f1_4: 0.7224 - f1_5: 0.5814 - loss: 0.7439 - val_accuracy: 0.7533 - val_f1: 0.5051 - val_f1_1: 0.3752 - val_f1_2: 0.4890 - val_f1_3: 0.7912 - val_f1_4: 0.6279 - val_f1_5: 0.4386 - val_loss: 1.1326 - learning_rate: 1.0000e-06\n","Epoch 77/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 54ms/step - accuracy: 0.7896 - f1: 0.6007 - f1_1: 0.6806 - f1_2: 0.7161 - f1_3: 0.7807 - f1_4: 0.7452 - f1_5: 0.5610 - loss: 0.7583 - val_accuracy: 0.7533 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7912 - val_f1_4: 0.6279 - val_f1_5: 0.4386 - val_loss: 1.1327 - learning_rate: 1.0000e-06\n","Epoch 78/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 46ms/step - accuracy: 0.7763 - f1: 0.6116 - f1_1: 0.6965 - f1_2: 0.7407 - f1_3: 0.7664 - f1_4: 0.7227 - f1_5: 0.5614 - loss: 0.7507 - val_accuracy: 0.7547 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7921 - val_f1_4: 0.6279 - val_f1_5: 0.4358 - val_loss: 1.1330 - learning_rate: 1.0000e-06\n","Epoch 79/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 47ms/step - accuracy: 0.7814 - f1: 0.5874 - f1_1: 0.7411 - f1_2: 0.6838 - f1_3: 0.7732 - f1_4: 0.7253 - f1_5: 0.5947 - loss: 0.7489 - val_accuracy: 0.7550 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7926 - val_f1_4: 0.6287 - val_f1_5: 0.4358 - val_loss: 1.1330 - learning_rate: 1.0000e-06\n","Epoch 80/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 53ms/step - accuracy: 0.7778 - f1: 0.5784 - f1_1: 0.6787 - f1_2: 0.7695 - f1_3: 0.7707 - f1_4: 0.7316 - f1_5: 0.5591 - loss: 0.7448 - val_accuracy: 0.7550 - val_f1: 0.5051 - val_f1_1: 0.3752 - val_f1_2: 0.4852 - val_f1_3: 0.7926 - val_f1_4: 0.6287 - val_f1_5: 0.4358 - val_loss: 1.1324 - learning_rate: 1.0000e-06\n","Epoch 81/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 44ms/step - accuracy: 0.7859 - f1: 0.6201 - f1_1: 0.6371 - f1_2: 0.7907 - f1_3: 0.7769 - f1_4: 0.7188 - f1_5: 0.5655 - loss: 0.7277 - val_accuracy: 0.7553 - val_f1: 0.5051 - val_f1_1: 0.3752 - val_f1_2: 0.4890 - val_f1_3: 0.7926 - val_f1_4: 0.6287 - val_f1_5: 0.4358 - val_loss: 1.1328 - learning_rate: 1.0000e-06\n","Epoch 82/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 65ms/step - accuracy: 0.7808 - f1: 0.5843 - f1_1: 0.6399 - f1_2: 0.7699 - f1_3: 0.7739 - f1_4: 0.7169 - f1_5: 0.5911 - loss: 0.7547 - val_accuracy: 0.7553 - val_f1: 0.5051 - val_f1_1: 0.3752 - val_f1_2: 0.4890 - val_f1_3: 0.7926 - val_f1_4: 0.6287 - val_f1_5: 0.4358 - val_loss: 1.1327 - learning_rate: 1.0000e-06\n","Epoch 83/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 47ms/step - accuracy: 0.7769 - f1: 0.6088 - f1_1: 0.7335 - f1_2: 0.7840 - f1_3: 0.7609 - f1_4: 0.7238 - f1_5: 0.5780 - loss: 0.7373 - val_accuracy: 0.7556 - val_f1: 0.5051 - val_f1_1: 0.3752 - val_f1_2: 0.4890 - val_f1_3: 0.7929 - val_f1_4: 0.6287 - val_f1_5: 0.4358 - val_loss: 1.1328 - learning_rate: 1.0000e-06\n","Epoch 84/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 71ms/step - accuracy: 0.7758 - f1: 0.6114 - f1_1: 0.7640 - f1_2: 0.7548 - f1_3: 0.7691 - f1_4: 0.7009 - f1_5: 0.6106 - loss: 0.7525 - val_accuracy: 0.7550 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7926 - val_f1_4: 0.6287 - val_f1_5: 0.4383 - val_loss: 1.1329 - learning_rate: 1.0000e-06\n","Epoch 85/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 46ms/step - accuracy: 0.7794 - f1: 0.5977 - f1_1: 0.6220 - f1_2: 0.7600 - f1_3: 0.7687 - f1_4: 0.7357 - f1_5: 0.6014 - loss: 0.7238 - val_accuracy: 0.7547 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7926 - val_f1_4: 0.6287 - val_f1_5: 0.4383 - val_loss: 1.1329 - learning_rate: 1.0000e-06\n","Epoch 86/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 60ms/step - accuracy: 0.7824 - f1: 0.5859 - f1_1: 0.6822 - f1_2: 0.7374 - f1_3: 0.7854 - f1_4: 0.7103 - f1_5: 0.5718 - loss: 0.7478 - val_accuracy: 0.7550 - val_f1: 0.5051 - val_f1_1: 0.3752 - val_f1_2: 0.4890 - val_f1_3: 0.7932 - val_f1_4: 0.6287 - val_f1_5: 0.4383 - val_loss: 1.1330 - learning_rate: 1.0000e-06\n","Epoch 87/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 47ms/step - accuracy: 0.7903 - f1: 0.6147 - f1_1: 0.6730 - f1_2: 0.7784 - f1_3: 0.7774 - f1_4: 0.7284 - f1_5: 0.5954 - loss: 0.7391 - val_accuracy: 0.7547 - val_f1: 0.5051 - val_f1_1: 0.3752 - val_f1_2: 0.4890 - val_f1_3: 0.7920 - val_f1_4: 0.6287 - val_f1_5: 0.4383 - val_loss: 1.1326 - learning_rate: 1.0000e-06\n","Epoch 88/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 68ms/step - accuracy: 0.7871 - f1: 0.6161 - f1_1: 0.6269 - f1_2: 0.6482 - f1_3: 0.7761 - f1_4: 0.7310 - f1_5: 0.5822 - loss: 0.7485 - val_accuracy: 0.7545 - val_f1: 0.5051 - val_f1_1: 0.3752 - val_f1_2: 0.4890 - val_f1_3: 0.7920 - val_f1_4: 0.6287 - val_f1_5: 0.4411 - val_loss: 1.1327 - learning_rate: 1.0000e-06\n","Epoch 89/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 44ms/step - accuracy: 0.7883 - f1: 0.6203 - f1_1: 0.7268 - f1_2: 0.7792 - f1_3: 0.7724 - f1_4: 0.7255 - f1_5: 0.5870 - loss: 0.7263 - val_accuracy: 0.7547 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7924 - val_f1_4: 0.6287 - val_f1_5: 0.4411 - val_loss: 1.1328 - learning_rate: 1.0000e-06\n","Epoch 90/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 71ms/step - accuracy: 0.7781 - f1: 0.6055 - f1_1: 0.7309 - f1_2: 0.7549 - f1_3: 0.7703 - f1_4: 0.7228 - f1_5: 0.5755 - loss: 0.7343 - val_accuracy: 0.7553 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7929 - val_f1_4: 0.6287 - val_f1_5: 0.4383 - val_loss: 1.1329 - learning_rate: 1.0000e-06\n","Epoch 91/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 46ms/step - accuracy: 0.7807 - f1: 0.6062 - f1_1: 0.6907 - f1_2: 0.6901 - f1_3: 0.7785 - f1_4: 0.7299 - f1_5: 0.5906 - loss: 0.7400 - val_accuracy: 0.7547 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7924 - val_f1_4: 0.6287 - val_f1_5: 0.4383 - val_loss: 1.1331 - learning_rate: 1.0000e-06\n","Epoch 92/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 64ms/step - accuracy: 0.7799 - f1: 0.5797 - f1_1: 0.6946 - f1_2: 0.7469 - f1_3: 0.7713 - f1_4: 0.7162 - f1_5: 0.5836 - loss: 0.7284 - val_accuracy: 0.7553 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7935 - val_f1_4: 0.6287 - val_f1_5: 0.4383 - val_loss: 1.1335 - learning_rate: 1.0000e-06\n","Epoch 93/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 56ms/step - accuracy: 0.7802 - f1: 0.6001 - f1_1: 0.7109 - f1_2: 0.7578 - f1_3: 0.7760 - f1_4: 0.7317 - f1_5: 0.5758 - loss: 0.7474 - val_accuracy: 0.7556 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7935 - val_f1_4: 0.6287 - val_f1_5: 0.4383 - val_loss: 1.1333 - learning_rate: 1.0000e-06\n","Epoch 94/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 59ms/step - accuracy: 0.7847 - f1: 0.5817 - f1_1: 0.6490 - f1_2: 0.6356 - f1_3: 0.7729 - f1_4: 0.7241 - f1_5: 0.5886 - loss: 0.7483 - val_accuracy: 0.7559 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7935 - val_f1_4: 0.6287 - val_f1_5: 0.4383 - val_loss: 1.1333 - learning_rate: 1.0000e-06\n","Epoch 95/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 63ms/step - accuracy: 0.7819 - f1: 0.5799 - f1_1: 0.7975 - f1_2: 0.6711 - f1_3: 0.7719 - f1_4: 0.7206 - f1_5: 0.5930 - loss: 0.7426 - val_accuracy: 0.7559 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7935 - val_f1_4: 0.6287 - val_f1_5: 0.4383 - val_loss: 1.1333 - learning_rate: 1.0000e-06\n","Epoch 96/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 48ms/step - accuracy: 0.7852 - f1: 0.6010 - f1_1: 0.6894 - f1_2: 0.6897 - f1_3: 0.7805 - f1_4: 0.7396 - f1_5: 0.5988 - loss: 0.7585 - val_accuracy: 0.7553 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7932 - val_f1_4: 0.6287 - val_f1_5: 0.4431 - val_loss: 1.1329 - learning_rate: 1.0000e-06\n","Epoch 97/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 48ms/step - accuracy: 0.7867 - f1: 0.5841 - f1_1: 0.6465 - f1_2: 0.7955 - f1_3: 0.7770 - f1_4: 0.7151 - f1_5: 0.6019 - loss: 0.7356 - val_accuracy: 0.7553 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7935 - val_f1_4: 0.6287 - val_f1_5: 0.4411 - val_loss: 1.1331 - learning_rate: 1.0000e-06\n","Epoch 98/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 62ms/step - accuracy: 0.7905 - f1: 0.6044 - f1_1: 0.6651 - f1_2: 0.7970 - f1_3: 0.7792 - f1_4: 0.7261 - f1_5: 0.5853 - loss: 0.7303 - val_accuracy: 0.7550 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7929 - val_f1_4: 0.6287 - val_f1_5: 0.4407 - val_loss: 1.1330 - learning_rate: 1.0000e-06\n","Epoch 99/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 67ms/step - accuracy: 0.7787 - f1: 0.5964 - f1_1: 0.5829 - f1_2: 0.6890 - f1_3: 0.7760 - f1_4: 0.7276 - f1_5: 0.5874 - loss: 0.7377 - val_accuracy: 0.7545 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7921 - val_f1_4: 0.6287 - val_f1_5: 0.4407 - val_loss: 1.1327 - learning_rate: 1.0000e-06\n","Epoch 100/100\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 48ms/step - accuracy: 0.7880 - f1: 0.6096 - f1_1: 0.7289 - f1_2: 0.7815 - f1_3: 0.7757 - f1_4: 0.7298 - f1_5: 0.6038 - loss: 0.7309 - val_accuracy: 0.7547 - val_f1: 0.5051 - val_f1_1: 0.3811 - val_f1_2: 0.4890 - val_f1_3: 0.7926 - val_f1_4: 0.6324 - val_f1_5: 0.4404 - val_loss: 1.1328 - learning_rate: 1.0000e-06\n"]}],"source":["history = model.fit(\n","    training_matrices,        # Input di training\n","    y_train_one_hot,          # Target di training (one-hot encoded)\n","    validation_data=(test_matrices, y_test_one_hot),  # Dati di validazione\n","    epochs=100,                # Numero di epoche\n","    batch_size=128,            # Batch size\n","    callbacks=[ lr_scheduler]  # Callback opzionali\n",")"]},{"cell_type":"code","execution_count":98,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":927},"executionInfo":{"elapsed":1028,"status":"ok","timestamp":1736177761432,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"QDNnkC_O_gB9","outputId":"3fe3a391-7d17-4da8-b1b3-a938f6b73cbc"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 640x480 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 640x480 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["loss = history.history['loss']\n","val_loss = history.history['val_loss']\n","epochs = range(1, len(loss) + 1)\n","plt.plot(epochs, loss, 'y', label='Training loss')\n","plt.plot(epochs, val_loss, 'r', label='Validation loss')\n","plt.title('Training and validation loss')\n","plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.legend()\n","plt.show()\n","\n","acc = history.history['accuracy']\n","val_acc = history.history['val_accuracy']\n","\n","plt.plot(epochs, acc, 'y', label='Training Accuracy')\n","plt.plot(epochs, val_acc, 'r', label='Validation Accuracy')\n","plt.title('Training and validation Accuracy')\n","plt.xlabel('Epochs')\n","plt.ylabel('Accuracy')\n","plt.legend()\n","plt.show()"]},{"cell_type":"code","execution_count":93,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":225459,"status":"ok","timestamp":1736177382432,"user":{"displayName":"Andrea Corsico","userId":"04308853884560532231"},"user_tz":-60},"id":"KmTzcTRFOLne","outputId":"acaf25cd-df4c-480f-9a4c-3179a3937b60"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 16/30\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 98ms/step - accuracy: 0.6686 - f1: 0.3400 - f1_1: 0.3635 - f1_2: 0.5783 - f1_3: 0.6787 - f1_4: 0.5278 - f1_5: 0.2662 - loss: 1.8065 - val_accuracy: 0.7050 - val_f1: 0.1704 - val_f1_1: 0.2938 - val_f1_2: 0.4723 - val_f1_3: 0.7219 - val_f1_4: 0.5875 - val_f1_5: 0.0806 - val_loss: 1.6608\n","Epoch 17/30\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m17s\u001b[0m 71ms/step - accuracy: 0.6877 - f1: 0.3279 - f1_1: 0.3552 - f1_2: 0.4974 - f1_3: 0.7106 - f1_4: 0.5623 - f1_5: 0.3442 - loss: 1.5179 - val_accuracy: 0.7160 - val_f1: 0.1891 - val_f1_1: 0.2837 - val_f1_2: 0.4793 - val_f1_3: 0.7688 - val_f1_4: 0.5274 - val_f1_5: 0.2231 - val_loss: 1.5034\n","Epoch 18/30\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 81ms/step - accuracy: 0.7071 - f1: 0.3380 - f1_1: 0.4587 - f1_2: 0.6151 - f1_3: 0.7403 - f1_4: 0.5967 - f1_5: 0.4119 - loss: 1.3334 - val_accuracy: 0.7191 - val_f1: 0.3871 - val_f1_1: 0.3126 - val_f1_2: 0.4595 - val_f1_3: 0.7328 - val_f1_4: 0.5695 - val_f1_5: 0.3958 - val_loss: 1.4205\n","Epoch 19/30\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 94ms/step - accuracy: 0.7170 - f1: 0.4325 - f1_1: 0.4962 - f1_2: 0.5713 - f1_3: 0.7394 - f1_4: 0.6363 - f1_5: 0.4369 - loss: 1.2425 - val_accuracy: 0.6866 - val_f1: 0.3349 - val_f1_1: 0.3165 - val_f1_2: 0.4710 - val_f1_3: 0.7029 - val_f1_4: 0.5705 - val_f1_5: 0.4301 - val_loss: 1.4089\n","Epoch 20/30\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 79ms/step - accuracy: 0.7092 - f1: 0.4010 - f1_1: 0.4347 - f1_2: 0.6128 - f1_3: 0.7437 - f1_4: 0.6452 - f1_5: 0.4542 - loss: 1.2365 - val_accuracy: 0.7151 - val_f1: 0.3740 - val_f1_1: 0.3185 - val_f1_2: 0.5047 - val_f1_3: 0.7441 - val_f1_4: 0.6098 - val_f1_5: 0.2190 - val_loss: 1.4105\n","Epoch 21/30\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 102ms/step - accuracy: 0.7174 - f1: 0.4424 - f1_1: 0.4366 - f1_2: 0.5681 - f1_3: 0.7408 - f1_4: 0.6489 - f1_5: 0.4676 - loss: 1.1802 - val_accuracy: 0.7491 - val_f1: 0.4305 - val_f1_1: 0.3670 - val_f1_2: 0.4960 - val_f1_3: 0.8090 - val_f1_4: 0.5965 - val_f1_5: 0.4300 - val_loss: 1.3880\n","Epoch 22/30\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 77ms/step - accuracy: 0.7223 - f1: 0.4950 - f1_1: 0.5518 - f1_2: 0.5961 - f1_3: 0.7559 - f1_4: 0.6710 - f1_5: 0.4736 - loss: 1.1713 - val_accuracy: 0.7267 - val_f1: 0.5068 - val_f1_1: 0.3655 - val_f1_2: 0.4871 - val_f1_3: 0.7541 - val_f1_4: 0.5849 - val_f1_5: 0.4244 - val_loss: 1.3917\n","Epoch 23/30\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 95ms/step - accuracy: 0.7205 - f1: 0.4701 - f1_1: 0.4584 - f1_2: 0.6230 - f1_3: 0.7509 - f1_4: 0.6667 - f1_5: 0.4862 - loss: 1.1845 - val_accuracy: 0.7185 - val_f1: 0.4607 - val_f1_1: 0.3426 - val_f1_2: 0.4603 - val_f1_3: 0.7485 - val_f1_4: 0.6005 - val_f1_5: 0.3713 - val_loss: 1.4047\n","Epoch 24/30\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 96ms/step - accuracy: 0.7163 - f1: 0.4625 - f1_1: 0.4960 - f1_2: 0.5795 - f1_3: 0.7468 - f1_4: 0.6389 - f1_5: 0.4843 - loss: 1.2470 - val_accuracy: 0.7242 - val_f1: 0.4125 - val_f1_1: 0.3075 - val_f1_2: 0.4946 - val_f1_3: 0.7516 - val_f1_4: 0.6033 - val_f1_5: 0.3974 - val_loss: 1.4336\n","Epoch 25/30\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 91ms/step - accuracy: 0.7234 - f1: 0.4668 - f1_1: 0.5144 - f1_2: 0.6303 - f1_3: 0.7597 - f1_4: 0.6560 - f1_5: 0.4978 - loss: 1.1747 - val_accuracy: 0.6900 - val_f1: 0.4465 - val_f1_1: 0.3595 - val_f1_2: 0.4589 - val_f1_3: 0.7159 - val_f1_4: 0.5535 - val_f1_5: 0.4699 - val_loss: 1.4274\n","Epoch 26/30\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 95ms/step - accuracy: 0.7190 - f1: 0.4944 - f1_1: 0.5456 - f1_2: 0.6256 - f1_3: 0.7534 - f1_4: 0.6377 - f1_5: 0.5053 - loss: 1.1758 - val_accuracy: 0.7508 - val_f1: 0.3757 - val_f1_1: 0.3449 - val_f1_2: 0.4584 - val_f1_3: 0.8119 - val_f1_4: 0.5946 - val_f1_5: 0.3283 - val_loss: 1.4286\n","Epoch 27/30\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 95ms/step - accuracy: 0.7323 - f1: 0.4219 - f1_1: 0.5178 - f1_2: 0.6034 - f1_3: 0.7606 - f1_4: 0.6712 - f1_5: 0.4924 - loss: 1.1765 - val_accuracy: 0.7420 - val_f1: 0.4287 - val_f1_1: 0.3371 - val_f1_2: 0.4851 - val_f1_3: 0.8136 - val_f1_4: 0.5992 - val_f1_5: 0.4570 - val_loss: 1.4395\n","Epoch 28/30\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 78ms/step - accuracy: 0.7326 - f1: 0.4820 - f1_1: 0.4926 - f1_2: 0.6623 - f1_3: 0.7698 - f1_4: 0.6418 - f1_5: 0.4926 - loss: 1.1768 - val_accuracy: 0.6724 - val_f1: 0.3025 - val_f1_1: 0.2458 - val_f1_2: 0.4772 - val_f1_3: 0.6900 - val_f1_4: 0.5938 - val_f1_5: 0.3444 - val_loss: 1.4676\n","Epoch 29/30\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 77ms/step - accuracy: 0.7204 - f1: 0.4995 - f1_1: 0.5305 - f1_2: 0.6867 - f1_3: 0.7571 - f1_4: 0.6719 - f1_5: 0.4778 - loss: 1.1842 - val_accuracy: 0.6967 - val_f1: 0.4530 - val_f1_1: 0.3432 - val_f1_2: 0.5332 - val_f1_3: 0.6951 - val_f1_4: 0.6177 - val_f1_5: 0.4313 - val_loss: 1.4106\n","Epoch 30/30\n","\u001b[1m111/111\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 93ms/step - accuracy: 0.7271 - f1: 0.4985 - f1_1: 0.4683 - f1_2: 0.6306 - f1_3: 0.7485 - f1_4: 0.6877 - f1_5: 0.5021 - loss: 1.1535 - val_accuracy: 0.7369 - val_f1: 0.5144 - val_f1_1: 0.3049 - val_f1_2: 0.4238 - val_f1_3: 0.7947 - val_f1_4: 0.5937 - val_f1_5: 0.4976 - val_loss: 1.4866\n"]}],"source":["# Continua il training aggiungendo nuove epoche\n","history_new = model.fit(\n","    training_matrices,\n","    y_train_one_hot,\n","    validation_data=(test_matrices, y_test_one_hot),\n","    epochs=30,        # Numero totale di nuove epoche da aggiungere\n","    batch_size=128,\n","    initial_epoch=15  # Specifica l'epoca iniziale per riprendere\n",")"]}],"metadata":{"colab":{"authorship_tag":"ABX9TyOOoFcH8PRWELAi7oF6lxhV","name":"","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}